<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<title>Daedalus 3.3 Scripting</title>

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
h1
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Arial","sans-serif";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p.A, li.A, div.A
	{mso-style-name:A;
	mso-style-link:"A Char Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
span.ACharChar
	{mso-style-name:"A Char Char";
	mso-style-link:A;}
p.Fixed, li.Fixed, div.Fixed
	{mso-style-name:Fixed;
	margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Courier New";}
p.Section, li.Section, div.Section
	{mso-style-name:Section;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	page-break-after:avoid;
	border:none;
	padding:0in;
	font-size:16.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;}
p.Item, li.Item, div.Item
	{mso-style-name:Item;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.B, li.B, div.B
	{mso-style-name:B;
	mso-style-link:"B Char Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
span.BCharChar
	{mso-style-name:"B Char Char";
	mso-style-link:B;}
span.M
	{mso-style-name:M;
	color:red;
	font-weight:bold;}
p.Section2, li.Section2, div.Section2
	{mso-style-name:Section2;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Courier New";
	color:red;
	font-weight:bold;}
span.N
	{mso-style-name:N;
	color:blue;
	font-weight:bold;}
span.O
	{mso-style-name:O;
	color:green;
	font-weight:bold;}
span.P
	{mso-style-name:P;
	color:olive;
	font-weight:bold;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 65.95pt 1.0in 65.95pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<p class=Fixed><span style='background:silver'>DDDDD</span>     <span
style='background:silver'>AAAAA</span>   <span style='background:silver'>EEEEEEE</span> 
<span style='background:silver'>DDDDD</span>     <span style='background:silver'>AAAAA</span>  
<span style='background:silver'>L</span>        <span style='background:silver'>U</span>    
<span style='background:silver'>U</span>   <span style='background:silver'>SSSSS</span></p>

<p class=Fixed><span style='background:silver'>D</span>    <span
style='background:silver'>D</span>   <span style='background:silver'>A</span>    
<span style='background:silver'>A</span>  <span style='background:silver'>E</span>       
<span style='background:silver'>D</span>    <span style='background:silver'>D</span>  
<span style='background:silver'>A</span>     <span style='background:silver'>A</span> 
<span style='background:silver'>L</span>        <span style='background:silver'>U</span>    
<span style='background:silver'>U</span>  <span style='background:silver'>S</span>    
<span style='background:silver'>S</span></p>

<p class=Fixed><span style='background:silver'>D</span>     <span
style='background:silver'>D</span>  <span style='background:silver'>A</span>    
<span style='background:silver'>A</span>  <span style='background:silver'>E</span>       
<span style='background:silver'>D</span>     <span style='background:silver'>D</span> 
<span style='background:silver'>A</span>     <span style='background:silver'>A</span> 
<span style='background:silver'>L</span>        <span style='background:silver'>U</span>    
<span style='background:silver'>U</span>  <span style='background:silver'>S</span></p>

<p class=Fixed><span style='background:silver'>D</span>     <span
style='background:silver'>D</span>  <span style='background:silver'>AAAAAAA</span> 
<span style='background:silver'>EEEEEE</span>   <span style='background:silver'>D</span>    
<span style='background:silver'>D</span>  <span style='background:silver'>AAAAAAA</span> 
<span style='background:silver'>L</span>        <span style='background:silver'>U</span>    
<span style='background:silver'>U</span>   <span style='background:silver'>SSSSS</span></p>

<p class=Fixed><span style='background:silver'>D</span>     <span
style='background:silver'>D</span>  <span style='background:silver'>A</span>    
<span style='background:silver'>A</span>  <span style='background:silver'>E</span>       
<span style='background:silver'>D</span>     <span style='background:silver'>D</span> 
<span style='background:silver'>A</span>     <span style='background:silver'>A</span> 
<span style='background:silver'>L</span>        <span style='background:silver'>U</span>    
<span style='background:silver'>U</span>        <span style='background:silver'>S</span></p>

<p class=Fixed><span style='background:silver'>D</span>    <span
style='background:silver'>D</span>   <span style='background:silver'>A</span>    
<span style='background:silver'>A</span>  <span style='background:silver'>E</span>       
<span style='background:silver'>D</span>    <span style='background:silver'>D</span>  
<span style='background:silver'>A</span>     <span style='background:silver'>A</span> 
<span style='background:silver'>L</span>        <span style='background:silver'>U</span>    
<span style='background:silver'>U</span>  <span style='background:silver'>S</span>    
<span style='background:silver'>S</span></p>

<p class=Fixed><span style='background:silver'>DDDDD</span>    <span
style='background:silver'>A</span>     <span style='background:silver'>A</span> 
<span style='background:silver'>EEEEEEE</span>  <span style='background:silver'>DDDDD</span>   
<span style='background:silver'>A</span>     <span style='background:silver'>A</span> 
<span style='background:silver'>LLLLLLL</span>   <span style='background:silver'>UUUUU</span>   
<span style='background:silver'>SSSSS</span></p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>                         **  VERSION  3.3  **</p>

<p class=Fixed>&nbsp;</p>

<p class=A>This describes the Daedalus scripting language. Daedalus contains
its own programming language, which can be used to automate actions, and even
design whole games or other programs using Daedalus as a platform. The Macros
submenu on the Edit menu allows access to these features. The file is divided
into seven sections:</p>

<p class=Item><span style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>1) <a href="#glossary">Glossary of Terms</a>:</b> Definitions
of the main terms used in Daedalus scripting.</p>

<p class=Item><span style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>2) <a href="#command">Commands</a>:</b> A list of each command
and its shortcut, that runs a menu option.</p>

<p class=Item><span style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>3) <a href="#operation">Operations</a>:</b> A list of each
operation, and documentation for it.</p>

<p class=Item><span style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>4) <a href="#variable">Variables</a>:</b> A list of each
variable, and documentation for it.</p>

<p class=Item><span style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>5) <a href="#function">Functions</a>:</b> A list of each
function, and documentation for it.</p>

<p class=Item><span style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>6) <a href="#event">Events</a>:</b> A list of each event, and
how it behaves.</p>

<p class=Item><span style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>7) <a href="#texture">Texture mapping</a>:</b> Documentation
of how texture bitmaps display in the perspective inside view.</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=glossary>GLOSSARY OF TERMS</a></p>

</div>

<p class=A><span class=M>Command Line:</span> A string of text containing a
sequence of actions. Command lines can be stored in macros and script files,
and are automatically executed when the macro or script is run. They can also
be manually executed by entering one in the Enter Command Line dialog, or
specified on the operating system command line when initially launching the
program.</p>

<p class=A><span class=M>Action:</span> An individual instruction that tells
Daedalus to run a menu command, set a dialog variable, or even access an extra
feature which isnt available through the standard user interface. An action is
one of three things: A command, an operation, or a variable assignment.</p>

<p class=A><span class=M>Macro:</span> A command line stored in a special place
which can be executed at any time. Macros can be manually defined in the Enter
Command Line dialog, or automatically defined by command lines. Macros can be
manually run by selecting commands on the Run Macro submenus, or automatically
run by command lines. Macros can call other macros and run script files. Macros
can go 100 nested levels deep before the program will halt them with an error
message.</p>

<p class=A><span class=M>Script:</span> A file containing a sequence of command
lines. Running the script executes each command line in sequence. Often a
script will define a bunch of macros to act as functions or subroutines in a
program. The first line of any script file needs to be the two characters DS
for Daedalus to consider it as such.</p>

<p class=A><span class=M>Event:</span> An occurrence in the program which can
be made to automatically trigger a macro execution. Events can be manually
defined in the Events dialog on the Macro submenu, or automatically defined by
command lines.</p>

<p class=A><span class=M>Command:</span> An action that runs a menu command,
and is equivalent to selecting that menu option in the program. Every menu
command in the program has a corresponding command action. Commands never take
any parameters.</p>

<p class=A><span class=M>Operation:</span> An action that does some other
operation. Operations either duplicate the functionality behind dialogs, or
access special hidden features only accessible through the scripting
language. Operations take zero or more parameters. Note most every dialog has
an operation that allows access to its functionality without bringing up the
dialog itself. For example, the DlgSize command just brings up the Bitmap Size
dialog and does nothing else. The Size operation however takes parameters to
specify the new size of the bitmap, and automatically resizes the bitmap
without bringing up the dialog.</p>

<p class=A><span class=M>Variable:</span> A number or string stored somewhere.
Each variable may have its value changed by an action. Variable assignments
always take one parameter, which is the new value for the variable to have.
Variables come in three types: Dialog settings, custom variables, and hidden scripting
only variables. Most every dialog setting in the program has a corresponding
variable.</p>

<p class=A><span class=M>Custom Variable:</span> One of a set of generic
numeric or string variables, which dont correspond to any specific program
setting, but can be used by scripts and such to store whatever they want. An
example is storing your score in a game. Some of the numeric variables are
automatically set by the program when it fires an event, and can be considered
as parameters to that event macro. Some are automatically queried by the
program after an event macro returns, and can be considered as return values
from that event. The custom number and string slots start at index #0. Custom
numeric variables can be referenced with the @ prefix (e.g. @0 or @999), while
custom strings can be referenced with the $ prefix (e.g. $0 or $999). Custom
numeric variables #1 through #26 can also be referenced with @a through @z. The
strings $a through $z refer to the custom string variables indexed by the
corresponding numeric variable, e.g. if @b contains 5, then $b refers to custom
string #5.</p>

<p class=A><span class=M>Parameter:</span> A piece of data passed to an
operation or variable assignment. Parameters are one of the following three
things: Constants, variables, or functions. Numeric constants are simply
numbers, or may have a # prefix to indicate hexadecimal format, or a ##
prefix to indicate binary format. String constants are always surrounded by
double quotes, single quotes, curly braces, or parentheses. Anything thats not
a constant is considered a variable or function to be queried or evaluated.</p>

<p class=A><span class=M>Function:</span> A type of parameter, which evaluates
to a number. Functions in turn are followed by zero or more parameters. An
example is Add, which takes two numeric parameters and returns their sum. A
function that takes zero parameters and always evaluates to the same thing can
be considered a named constant, such as True or a specific color like Red.
Because functions always precede their parameters, expressions in Daedalus are
in prefix format, e.g. Mul Add 1 2 Sub 4 3 expresses Multiply(Add(1, 2),
Subtract(4, 3)) or (1 + 2) x (4 - 3).</p>

<p class=A><span class=M>Type:</span> The type of data contained in a parameter
or variable. All parameters or variables contain either numbers or strings.
Numbers are signed 32 bit integers. Boolean values are no different from
numbers, where False is represented by 0, and True is represented by 1 or any
non-zero number. Colors are simply 24 bit numbers that represent the RGB parts of the color, where the high 8 bits contain the red part, the middle 8 bits contain the
green part, and the low 8 bits contain the blue part. File handles are stored
in numbers as well. There are no floating point numbers, where dialog variables
that take floating point numbers are covered by integers with an assumed
decimal point, where the low digits represent the fractional part, e.g. 1.25
in the dialog translates to 125, 2.5 in the dialog translates to 250, and so
on.</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=command>COMMANDS</a></p>

</div>

<p class=A>Most commands which display a single numeric result will set custom
variable @z to the value displayed. For example Fill Dead Ends sets @z to the
number of dead ends filled. Count Pixels sets @z to the number of on pixels
when the main bitmap is active, and to the number of white pixels when the
color bitmap is active. Although it doesnt display anything, Recursive Fractal
sets @z to the minimum possible maximum depth for a solution path to the end at
any depth.</p>

<p class=A>In the table below, each command has a standard name, which may be
referenced case insensitively. Some commands also have a shortcut, which must
be referenced case sensitively. A command shortcut name is the only place where
case matters in scripting. A command has a shortcut only if it has a keyboard
shortcut on the menu. The command shortcut is basically the key you press,
where s is a prefix for shift, c means control, and a means alt.</p>

<p class=Fixed>Menu command                                 Command
name          Shortcut</p>

<p class=Section2>********************  File Menu  ********************</p>

<p class=Fixed>File / Open...                              
DlgOpen               o</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / Run Script / Demos                    Script1               a1</p>

<p class=Fixed>File / Run Script / Word Mazes              
Script2               a2</p>

<p class=Fixed>File / Run Script / World's Largest Maze    
Script3               a3</p>

<p class=Fixed>File / Run Script / 4D Mazes                
Script4               a4</p>

<p class=Fixed>File / Run Script / 5D Mazes                 Script5              
a5</p>

<p class=Fixed>File / Run Script / Dragonslayer Game       
Script6               a6</p>

<p class=Fixed>File / Run Script / Pac-Man Game            
Script7               a7</p>

<p class=Fixed>File / Run Script / Sokoban Game            
Script8               a8</p>

<p class=Fixed>File / Run Script / The Hunger Games         Script9              
a9</p>

<p class=Fixed>File / Run Script / Survivor Maze #1        
Script11              a!</p>

<p class=Fixed>File / Run Script / Survivor Maze #2        
Script12              a@</p>

<p class=Fixed>File / Run Script / Survivor Maze #3         Script13              a#</p>

<p class=Fixed>File / Run Script / Survivor Maze #4        
Script14              a$</p>

<p class=Fixed>File / Run Script / Survivor Maze #5        
Script15              a%</p>

<p class=Fixed>File / Run Script / Survivor Maze #6         Script16             
a^</p>

<p class=Fixed>File / Run Script / Survivor Maze #7        
Script17              a&amp;</p>

<p class=Fixed>File / Run Script / Survivor Maze #8         Script18             
a*</p>

<p class=Fixed>File / Run Script / Survivor Maze #9         Script19             
a(</p>

<p class=Fixed>File / Run Script / Survivor Maze #10       
Script10              a)</p>

<p class=Fixed>File / Run Script / Carleton Farm Maze #1    Script21             
ac1</p>

<p class=Fixed>File / Run Script / Carleton Farm Maze #2    Script22             
ac2</p>

<p class=Fixed>File / Run Script / Stocker Farms Maze       Script23             
ac3</p>

<p class=Fixed>File / Run Script / Glacier Maze             Script24              ac4</p>

<p class=Fixed>File / Run Script / Safari Maze              Script25             
ac5</p>

<p class=Fixed>File / Run Script / Mouse Maze               Script26             
ac6</p>

<p class=Fixed>File / Run Script / Survivor Squares Game    Script27             
ac7</p>

<p class=Fixed>File / Run Script / Mandelbrot Set Fractal   Script28             
ac8</p>

<p class=Fixed>File / Run Script / Pentris                  Script29             
ac9</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / Open Bitmap...                       
DlgOpenBitmap         ao</p>

<p class=Fixed>File / Save Bitmap...                       
DlgSaveBitmap         w</p>

<p class=Fixed>File / Open Text...                          DlgOpenText</p>

<p class=Fixed>File / Save Text...                          DlgSaveText</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / DOS Text / Save Blocks...             DlgSaveDOSBlock</p>

<p class=Fixed>File / DOS Text / Save Lines...              DlgSaveDOSLine</p>

<p class=Fixed>File / DOS Text / Save Double Lines...       DlgSaveDOSLine2</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / X11 Bitmap / Open...                  DlgOpenX11</p>

<p class=Fixed>File / X11 Bitmap / Save Normal...           DlgSaveX11</p>

<p class=Fixed>File / X11 Bitmap / Save Compressed...       DlgSaveX11Comp</p>

<p class=Fixed>File / X11 Bitmap / Save Supercompressed...  DlgSaveX11Super</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / 3D Bitmap / Open...                   DlgOpen3D</p>

<p class=Fixed>File / 3D Bitmap / Save Normal...            DlgSave3D</p>

<p class=Fixed>File / 3D Bitmap / Save Supercompressed...   DlgSave3DSuper</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / Save As Wallpaper / Center Bitmap     SaveWallCenter</p>

<p class=Fixed>File / Save As Wallpaper / Tile Bitmap       SaveWallTile</p>

<p class=Fixed>File / Save As Wallpaper / Stretch Bitmap    SaveWallStretch</p>

<p class=Fixed>File / Save As Wallpaper / Fit Bitmap        SaveWallFit</p>

<p class=Fixed>File / Save As Wallpaper / Fill Bitmap       SaveWallFill</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / Print...                              Print</p>

<p class=Fixed>File / Print Setup...                        PrintSetup</p>

<p class=Fixed>File / File Settings...                     
DlgFile               af</p>

<p class=Fixed>File / Open Documentation                   
Documentation         )</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / More Help / Open Scripting            HelpScript</p>

<p class=Fixed>File / More Help / Open Changes              HelpChange</p>

<p class=Fixed>File / More Help / Open License              HelpLicense</p>

<p class=Fixed>File / More Help / Open Website              Web</p>

<p class=Fixed>File / More Help / Open Website Mirror       Web2</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / Setup / Program Group (User)          SetupUser</p>

<p class=Fixed>File / Setup / Program Group (All)           SetupAll</p>

<p class=Fixed>File / Setup / Desktop Icon                  SetupDesktop</p>

<p class=Fixed>File / Setup / File Extensions               SetupExtension</p>

<p class=Fixed>File / Setup / Uninstall Extensions          UnsetupExtension</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>File / About Daedalus...                    
About                 a0</p>

<p class=Fixed>File / Exit                                 
Exit                  Esc</p>

<p class=Section2>********************  Edit Menu  ********************</p>

<p class=Fixed>Edit / Repeat Command                        Repeat               
;</p>

<p class=Fixed>Edit / Autorepeat                           
Autorepeat            N</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Edit / Macros / Enter Command Line...       
DlgCommand            Ent</p>

<p class=Fixed>Edit / Macros / Open Script...              
DlgOpenScript         co</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 1         
Macro1                F1</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 2         
Macro2                F2</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 3         
Macro3                F3</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 4         
Macro4                F4</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 5         
Macro5                F5</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 6         
Macro6                F6</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 7         
Macro7                F7</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 8          Macro8               
F8</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 9         
Macro9                F9</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 10        
Macro10               F10</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 11        
Macro11               F11</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 12        
Macro12               F12</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 13        
Macro13               sF1</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 14        
Macro14               sF2</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 15         Macro15               sF3</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 16        
Macro16               sF4</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 17        
Macro17               sF5</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 18        
Macro18               sF6</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 19        
Macro19               sF7</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 20        
Macro20               sF8</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 21        
Macro21               sF9</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 22        
Macro22               sF10</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 23        
Macro23               sF11</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 24        
Macro24               sF12</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 25        
Macro25               cF1</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 26         Macro26              
cF2</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 27        
Macro27               cF3</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 28        
Macro28               cF4</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 29        
Macro29               cF5</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 30        
Macro30               cF6</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 31        
Macro31               cF7</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 32        
Macro32               cF8</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 33         Macro33               cF9</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 34        
Macro34               cF10</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 35        
Macro35               cF11</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 36        
Macro36               cF12</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 37        
Macro37               aF1</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 38        
Macro38               aF2</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 39        
Macro39               aF3</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 40        
Macro40               aF4</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 41        
Macro41               aF5</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 42        
Macro42               aF6</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 43        
Macro43               aF7</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 44         Macro44              
aF8</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 45        
Macro45               aF9</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 46        
Macro46               aF10</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 47        
Macro47               aF11</p>

<p class=Fixed>Edit / Macros / Run Macro / Macro 48        
Macro48               aF12</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Edit / Macros / Macro Events...              DlgEvent</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Edit / Copy Bitmap                           CopyBitmap           
cc</p>

<p class=Fixed>Edit / Copy Text                             CopyText</p>

<p class=Fixed>Edit / Paste                                 Paste                
cv</p>

<p class=Fixed>Edit / Display Settings...                  
DlgDisplay            Tab</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Edit / Cell Viewport Span / Decrease By 1   
Viewport-1            {</p>

<p class=Fixed>Edit / Cell Viewport Span / Increase By 1   
Viewport+1            }</p>

<p class=Fixed>Edit / Cell Viewport Span / Decrease By 10  
Viewport-10           [</p>

<p class=Fixed>Edit / Cell Viewport Span / Increase By 10  
Viewport+10           ]</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Edit / Window / Size Window Full Screen     
WindowFull            sTab</p>

<p class=Fixed>Edit / Window / Size Window To Bitmap        WindowBitmap</p>

<p class=Fixed>Edit / Window / Size Bitmap To Window        SizeWindow</p>

<p class=Fixed>Edit / Window / Update Window               
Update                n</p>

<p class=Fixed>Edit / Window / Redraw Window               
Redraw                Spc</p>

<p class=Fixed>Edit / Window / Scroll Page Up               ScrollUp             
aPgUp</p>

<p class=Fixed>Edit / Window / Scroll Page Down             ScrollDown           
aPgDn</p>

<p class=Fixed>Edit / Window / Scroll To Beginning          ScrollHome           
aHome</p>

<p class=Fixed>Edit / Window / Scroll To End                ScrollEnd            
aEnd</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Edit / Set Colors...                        
DlgColors             ck</p>

<p class=Fixed>Edit / Ignore Messages                      
IgnoreMessage         ?</p>

<p class=Fixed>Edit / Query Timer                          
TimerQuery            t</p>

<p class=Fixed>Edit / Reset Timer                           TimerReset            ct</p>

<p class=Fixed>Edit / Pause Timer                          
TimerPause            p</p>

<p class=Fixed>Edit / Random Settings...                   
DlgRandom             ar</p>

<p class=Fixed>Edit / Randomize Seed                       
Randomize             cr</p>

<p class=Section2>********************  Dot Menu  ********************</p>

<p class=Fixed>Dot / Dot Settings...                       
DlgDot                v</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / Move Dot / Down Left                  
MoveDL                1</p>

<p class=Fixed>Dot / Move Dot / Down                       
MoveD                 2</p>

<p class=Fixed>Dot / Move Dot / Down Right                  MoveDR               
3</p>

<p class=Fixed>Dot / Move Dot / Left                       
MoveL                 4</p>

<p class=Fixed>Dot / Move Dot / Right                      
MoveR                 6</p>

<p class=Fixed>Dot / Move Dot / Up Left                    
MoveUL                7</p>

<p class=Fixed>Dot / Move Dot / Up                         
MoveU                 8</p>

<p class=Fixed>Dot / Move Dot / Up Right                   
MoveUR                9</p>

<p class=Fixed>Dot / Move Dot / Raise                      
MoveRaise             u</p>

<p class=Fixed>Dot / Move Dot / Lower                       MoveLower             d</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / Move Relative / Forward               
MoveForward           cf</p>

<p class=Fixed>Dot / Move Relative / Back                  
MoveBack              cb</p>

<p class=Fixed>Dot / Move Relative / Turn Around           
Around                ca</p>

<p class=Fixed>Dot / Move Relative / Left                   Left                 
l</p>

<p class=Fixed>Dot / Move Relative / Right                 
Right                 r</p>

<p class=Fixed>Dot / Move Relative / Random                
MoveRandom            0</p>

<p class=Fixed>Dot / Move Relative / North                  MoveNorth            
cn</p>

<p class=Fixed>Dot / Move Relative / South                  MoveSouth            
cs</p>

<p class=Fixed>Dot / Move Relative / West                   MoveWest             
cw</p>

<p class=Fixed>Dot / Move Relative / East                   MoveEast             
ce</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / Jump Dot / Down Left                   JumpDL                !</p>

<p class=Fixed>Dot / Jump Dot / Down                       
JumpD                 @</p>

<p class=Fixed>Dot / Jump Dot / Down Right                 
JumpDR                #</p>

<p class=Fixed>Dot / Jump Dot / Left                       
JumpL                 $</p>

<p class=Fixed>Dot / Jump Dot / Right                       JumpR                
^</p>

<p class=Fixed>Dot / Jump Dot / Up Left                    
JumpUL                &amp;</p>

<p class=Fixed>Dot / Jump Dot / Up                         
JumpU                 *</p>

<p class=Fixed>Dot / Jump Dot / Up Right                   
JumpUR                (</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / Teleport Dot / UL Corner              
GoUL                  c7</p>

<p class=Fixed>Dot / Teleport Dot / UR Corner              
GoUR                  c9</p>

<p class=Fixed>Dot / Teleport Dot / LL Corner              
GoLL                  c1</p>

<p class=Fixed>Dot / Teleport Dot / LR Corner               GoLR                  c3</p>

<p class=Fixed>Dot / Teleport Dot / Entrance               
GoEntrance            c8</p>

<p class=Fixed>Dot / Teleport Dot / Exit                   
GoExit                c2</p>

<p class=Fixed>Dot / Teleport Dot / Left Entrance          
GoEntrance2           c4</p>

<p class=Fixed>Dot / Teleport Dot / Right Exit              GoExit2              
c6</p>

<p class=Fixed>Dot / Teleport Dot / Middle                 
GoMiddle              c5</p>

<p class=Fixed>Dot / Teleport Dot / Random                 
GoRandom              c0</p>

<p class=Fixed>Dot / Teleport Dot / 2nd Dot                
Go2nd                 cg</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / Show Dot                              
DotShow               .</p>

<p class=Fixed>Dot / Walls Impassable                      
DotWall               ,</p>

<p class=Fixed>Dot / Move By Two                           
DotTwo                e</p>

<p class=Fixed>Dot / Drag Move Dot                          DotDrag               a</p>

<p class=Fixed>Dot / Drag Is Erase                         
DotErase              c</p>

<p class=Fixed>Dot / Drag Big Dot                          
DotBig                b</p>

<p class=Fixed>Dot / Drag By Two                           
DotDragTwo            f</p>

<p class=Fixed>Dot / Set At Dot                             DotSet               
h</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / Zap Dot / Destroy Wall                
ZapWall               cz</p>

<p class=Fixed>Dot / Zap Dot / Make Wall Semitransparent   
ZapTrans              cx</p>

<p class=Fixed>Dot / Zap Dot / Make Unsemitransparent      
ZapUntrans            cy</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / 2nd Dot / Set To Dot                  
2ndSet                g</p>

<p class=Fixed>Dot / 2nd Dot / Draw Line                    2ndLine</p>

<p class=Fixed>Dot / 2nd Dot / Draw Block                   2ndBlock</p>

<p class=Fixed>Dot / 2nd Dot / Draw Box                     2ndBox</p>

<p class=Fixed>Dot / 2nd Dot / Draw Disk                    2ndDisk</p>

<p class=Fixed>Dot / 2nd Dot / Draw Circle                  2ndCircle</p>

<p class=Fixed>Dot / 2nd Dot / Get Section                 
2ndGet                ag</p>

<p class=Fixed>Dot / 2nd Dot / Put At Dot                  
2ndPut                aG</p>

<p class=Fixed>Dot / 2nd Dot / Put With Or                  2ndOr</p>

<p class=Fixed>Dot / 2nd Dot / Put With And                 2ndAnd</p>

<p class=Fixed>Dot / 2nd Dot / Put With Xor                 2ndXor</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Dot / View Inside                           
Inside                i</p>

<p class=Fixed>Dot / Map Inside                            
InsideMap             :</p>

<p class=Fixed>Dot / Mark 'X' At Dot                       
MarkX                 x</p>

<p class=Fixed>Dot / Erase 'X' At Dot                      
EraseX                y</p>

<p class=Fixed>Dot / Inside Settings...                    
DlgInside             q</p>

<p class=Section2>********************  Bitmap Menu  ********************</p>

<p class=Fixed>Bitmap / Size...                            
DlgSize               s</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Common Sizes / 32 x 16             
SizeA                 cA</p>

<p class=Fixed>Bitmap / Common Sizes / 32 x 32             
SizeB                 cB</p>

<p class=Fixed>Bitmap / Common Sizes / 64 x 32              SizeD                 cD</p>

<p class=Fixed>Bitmap / Common Sizes / 64 x 48             
SizeE                 cE</p>

<p class=Fixed>Bitmap / Common Sizes / 64 x 64             
SizeF                 cF</p>

<p class=Fixed>Bitmap / Common Sizes / 128 x 64            
SizeH                 cH</p>

<p class=Fixed>Bitmap / Common Sizes / 128 x 96            
SizeI                 cI</p>

<p class=Fixed>Bitmap / Common Sizes / 128 x 128           
SizeJ                 cJ</p>

<p class=Fixed>Bitmap / Common Sizes / 128 x 192           
SizeS                 cS</p>

<p class=Fixed>Bitmap / Common Sizes / 192 x 192           
SizeT                 cT</p>

<p class=Fixed>Bitmap / Common Sizes / 256 x 192           
SizeX                 cX</p>

<p class=Fixed>Bitmap / Common Sizes / 256 x 384           
SizeY                 cY</p>

<p class=Fixed>Bitmap / Common Sizes / 512 x 384           
SizeZ                 cZ</p>

<p class=Fixed>Bitmap / Common Sizes / 512 x 768            Size\                 c\</p>

<p class=Fixed>Bitmap / Common Sizes / 1024 x 384          
Size]                 c]</p>

<p class=Fixed>Bitmap / Common Sizes / 1024 x 768           Size!                
c!</p>

<p class=Fixed>Bitmap / Common Sizes / 1024 x 1024         
Size^                 c^</p>

<p class=Fixed>Bitmap / Common Sizes / 1024 x 2048         
Size#                 c#</p>

<p class=Fixed>Bitmap / Common Sizes / 2048 x 4096         
Size%                 c%</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / All / Clear All                     AllClear             
 Del</p>

<p class=Fixed>Bitmap / All / Set All                      
AllSet                sDel</p>

<p class=Fixed>Bitmap / All / Invert All                   
AllInvert             cDel</p>

<p class=Fixed>Bitmap / All / Random All                    AllRandom</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Zoom...                            
DlgZoom               z</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Flip And Rotate / Flip Horizontal   FlipHorizontal</p>

<p class=Fixed>Bitmap / Flip And Rotate / Flip Vertical     FlipVertical</p>

<p class=Fixed>Bitmap / Flip And Rotate / Transpose         Transpose</p>

<p class=Fixed>Bitmap / Flip And Rotate / Rotate Left       RotateLeft</p>

<p class=Fixed>Bitmap / Flip And Rotate / Rotate Right      RotateRight</p>

<p class=Fixed>Bitmap / Flip And Rotate / Rotate Across     RotateAcross</p>

<p class=Fixed>Bitmap / Flip And Rotate / 3D Bitmap...      DlgFlip3D</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Temp Bitmap / Get                  
TempGet               =</p>

<p class=Fixed>Bitmap / Temp Bitmap / Put                  
TempPut               +</p>

<p class=Fixed>Bitmap / Temp Bitmap / Swap                  TempSwap             
_</p>

<p class=Fixed>Bitmap / Temp Bitmap / Or                    TempOr</p>

<p class=Fixed>Bitmap / Temp Bitmap / And                   TempAnd</p>

<p class=Fixed>Bitmap / Temp Bitmap / Xor                   TempXor</p>

<p class=Fixed>Bitmap / Temp Bitmap / Blend                 Blend</p>

<p class=Fixed>Bitmap / Temp Bitmap / Tessellate            Tessellate</p>

<p class=Fixed>Bitmap / Temp Bitmap / Delete                TempDelete</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Extra Bitmap / Get                 
ExtraGet              \</p>

<p class=Fixed>Bitmap / Extra Bitmap / Put                 
ExtraPut              |</p>

<p class=Fixed>Bitmap / Extra Bitmap / Swap                
ExtraSwap             -</p>

<p class=Fixed>Bitmap / Extra Bitmap / Delete               ExtraDelete</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Collapse To Set                     CollapseToSet</p>

<p class=Fixed>Bitmap / Smooth Zoomed                       SmoothZoom</p>

<p class=Fixed>Bitmap / Smooth Corners                      SmoothCorner</p>

<p class=Fixed>Bitmap / Thicken                             Thicken</p>

<p class=Fixed>Bitmap / Make Thinner                        Thinner</p>

<p class=Fixed>Bitmap / Accent Boundaries                   Accent</p>

<p class=Fixed>Bitmap / Fill At Dot                        
Fill                  `</p>

<p class=Fixed>Bitmap / Flood At Dot                       
Flood                 ~</p>

<p class=Fixed>Bitmap / Slide To Dot                        Slide</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Row Column Edits / Insert Column At Dot    InsCol</p>

<p class=Fixed>Bitmap / Row Column Edits / Delete Column At Dot    DelCol</p>

<p class=Fixed>Bitmap / Row Column Edits / Insert Row At Dot       InsRow</p>

<p class=Fixed>Bitmap / Row Column Edits / Delete Row At Dot       DelRow</p>

<p class=Fixed>Bitmap / Row Column Edits / Insert Columns At Dots  InsCols</p>

<p class=Fixed>Bitmap / Row Column Edits / Delete Columns At Dots  DelCols</p>

<p class=Fixed>Bitmap / Row Column Edits / Insert Rows At Dots     InsRows</p>

<p class=Fixed>Bitmap / Row Column Edits / Delete Rows At Dots     DelRows</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Bitmap / Bitmap Is 3D                       
3DBitmap              j</p>

<p class=Fixed>Bitmap / Count Pixels                       
CountPixels           ac</p>

<p class=Section2>********************  Color Menu  ********************</p>

<p class=Fixed>Color / Show Color Bitmap                   
ShowColor             k</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Color Bitmap File / Open Targa...    DlgOpenTarga</p>

<p class=Fixed>Color / Color Bitmap File / Save Targa...    DlgSaveTarga</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Bitmap / Get From Bitmap             ColorGet             
Quo</p>

<p class=Fixed>Color / Bitmap / Put To Bitmap               ColorPut</p>

<p class=Fixed>Color / Bitmap / Put To Bitmap (Nearest)     ColorNearest</p>

<p class=Fixed>Color / Bitmap / Put To Bitmap (Dither)      ColorDither</p>

<p class=Fixed>Color / Bitmap / Or From Bitmap              ColorOr</p>

<p class=Fixed>Color / Bitmap / And From Bitmap             ColorAnd</p>

<p class=Fixed>Color / Bitmap / Xor From Bitmap             ColorXor</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Blend From 2 Bitmaps                 Blend2</p>

<p class=Fixed>Color / Blend From 3 Bitmaps                 Blend3</p>

<p class=Fixed>Color / Graph Distance                       GraphDistance</p>

<p class=Fixed>Color / Graph Walls                          GraphWalls</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Antialias From Bitmap / 2x2          Antialias2</p>

<p class=Fixed>Color / Antialias From Bitmap / 3x3          Antialias3</p>

<p class=Fixed>Color / Antialias From Bitmap / 4x4          Antialias4</p>

<p class=Fixed>Color / Antialias From Bitmap / 5x5          Antialias5</p>

<p class=Fixed>Color / Antialias From Bitmap / 6x6          Antialias6</p>

<p class=Fixed>Color / Antialias From Bitmap / 7x7          Antialias7</p>

<p class=Fixed>Color / Antialias From Bitmap / 8x8          Antialias8</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Dot Color / Set To Color             ColorDotSet</p>

<p class=Fixed>Color / Dot Color / Or With Color            ColorDotOr</p>

<p class=Fixed>Color / Dot Color / And With Color           ColorDotAnd</p>

<p class=Fixed>Color / Dot Color / Xor With Color           ColorDotXor</p>

<p class=Fixed>Color / Dot Color / Add With Color           ColorDotAdd</p>

<p class=Fixed>Color / Dot Color / Subtract With Color      ColorDotSub</p>

<p class=Fixed>Color / Dot Color / Multiply With Color      ColorDotMul</p>

<p class=Fixed>Color / Dot Color / Min With Color           ColorDotMin</p>

<p class=Fixed>Color / Dot Color / Max With Color           ColorDotMax</p>

<p class=Fixed>Color / Dot Color / Blend With Color         ColorDotBlend</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Color Bitmap / Add With Temp         ColorTempAdd</p>

<p class=Fixed>Color / Color Bitmap / Subtract With Temp    ColorTempSub</p>

<p class=Fixed>Color / Color Bitmap / Alpha With Temp       ColorTempAlpha</p>

<p class=Fixed>Color / Color Bitmap / Delete                ColorDelete</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Make Grayscale                       ColorGrayscale</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Apply Texture / Background           TextureBack</p>

<p class=Fixed>Color / Apply Texture / Color Walls          TextureColor</p>

<p class=Fixed>Color / Apply Texture / Overlay Walls        TextureOverlay</p>

<p class=Fixed>Color / Apply Texture / Color Overlay Walls  TextureWall</p>

<p class=Fixed>Color / Apply Texture / Color Ground         TextureColorG</p>

<p class=Fixed>Color / Apply Texture / Overlay Ground       TextureOverlayG</p>

<p class=Fixed>Color / Apply Texture / Color Overlay Ground TextureGround</p>

<p class=Fixed>Color / Apply Texture / Color Blocks         TextureColorB</p>

<p class=Fixed>Color / Apply Texture / Overlay Blocks       TextureOverlayB</p>

<p class=Fixed>Color / Apply Texture / Color Overlay Blocks TextureBlock</p>

<p class=Fixed>Color / Apply Texture / Ceiling              TextureCeiling</p>

<p class=Fixed>Color / Apply Texture / Variable Height Wall WallVariable</p>

<p class=Fixed>Color / Apply Texture / Ground Elevation     GroundVariable</p>

<p class=Fixed>Color / Apply Texture / Delete               TextureDelete</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Color / Brightness...                       
DlgBrightness         aK</p>

<p class=Fixed>Color / Replace Color...                    
DlgReplace            ak</p>

<p class=Section2>********************  Maze Menu  ********************</p>

<p class=Fixed>Maze / Maze Size...                         
DlgMazeSize           m</p>

<p class=Fixed>Maze / Zoom Bias...                         
DlgBias               az</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Maze / Add / Add Entrance                    AddEntrance</p>

<p class=Fixed>Maze / Add / Add Exit                        AddExit</p>

<p class=Fixed>Maze / Add / Add Passage                    
AddPassage            &lt;</p>

<p class=Fixed>Maze / Add / Add Wall                       
AddWall               &gt;</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Maze / Remove / Crack Isolations             NoIsolation</p>

<p class=Fixed>Maze / Remove / Connect Detachments          NoDetachment</p>

<p class=Fixed>Maze / Remove / Crack Dead Ends              NoDeadEnd</p>

<p class=Fixed>Maze / Remove / Seal Entrances               NoEntrance</p>

<p class=Fixed>Maze / Remove / Connect Poles                ConnectPole</p>

<p class=Fixed>Maze / Remove / Remove Poles                 NoPole</p>

<p class=Fixed>Maze / Remove / Crack Cells                  NoCell</p>

<p class=Fixed>Maze / Remove / Crack Blind Alley Cells      NoBlindAlley</p>

<p class=Fixed>Maze / Remove / Fill Passages                NoPassage</p>

<p class=Fixed>Maze / Remove / Fill Open Cells              NoRoom</p>

<p class=Fixed>Maze / Remove / Remove Boundary              NoBoundary</p>

<p class=Fixed>Maze / Remove / Remove Tubes                 NoTube</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Maze / Normalize / Add Passages              NormalizePassage</p>

<p class=Fixed>Maze / Normalize / Add Walls                 NormalizeWall</p>

<p class=Fixed>Maze / Normalize / Erase Bottom Right       
NoBottomRight         '</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Maze / Make Symmetric                        Symmetric</p>

<p class=Fixed>Maze / Expand Set                            ExpandSet</p>

<p class=Fixed>Maze / Room Thinned                          RoomThinned</p>

<p class=Fixed>Maze / Tweak Endpoints                      
TweakEndpoint         E</p>

<p class=Fixed>Maze / Tweak Passages                       
TweakPassage          H</p>

<p class=Fixed>Maze / Weave To 3D                           Weave3D</p>

<p class=Fixed>Maze / Weave To Inside                       WeaveInside</p>

<p class=Fixed>Maze / Clarify Weave                         ClarifyWeave</p>

<p class=Fixed>Maze / Clarify 3D                            Clarify3D</p>

<p class=Fixed>Maze / Clarify 4D                            Clarify4D</p>

<p class=Fixed>Maze / Count Possible                        CountPossible</p>

<p class=Fixed>Maze / Analyze Passages                     
AnalyzePassage        ap</p>

<p class=Fixed>Maze / Analyze Walls                         AnalyzeWall          
aP</p>

<p class=Fixed>Maze / Maze Settings...                     
DlgMaze               cm</p>

<p class=Section2>********************  Create Menu  ********************</p>

<p class=Fixed>Create / Perfect                            
Perfect               P</p>

<p class=Fixed>Create / Braid                               Braid                
B</p>

<p class=Fixed>Create / Unicursal                          
Unicursal             U</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / More Perfect / Recursive Backtrack 
Recursive             ab</p>

<p class=Fixed>Create / More Perfect / Prim's Algorithm    
Prim                  am</p>

<p class=Fixed>Create / More Perfect / True Prim's          Prim2                
aM</p>

<p class=Fixed>Create / More Perfect / Kruskal's Algorithm 
Kruskal               al</p>

<p class=Fixed>Create / More Perfect / Aldous-Broder       
AldousBroder          aa</p>

<p class=Fixed>Create / More Perfect / Wilson's Algorithm  
Wilson                aw</p>

<p class=Fixed>Create / More Perfect / Eller's Algorithm   
Eller                 ae</p>

<p class=Fixed>Create / More Perfect / Growing Tree        
Tree                  T</p>

<p class=Fixed>Create / More Perfect / Growing Forest       Forest               
aT</p>

<p class=Fixed>Create / More Perfect / Recursive Division   Division             
aj</p>

<p class=Fixed>Create / More Perfect / Binary Tree         
Binary                ay</p>

<p class=Fixed>Create / More Perfect / Sidewinder          
Sidewinder            as</p>

<p class=Fixed>Create / More Perfect / Hunt And Kill       
Perfect               P</p>

<p class=Fixed>Create / More Perfect / Random Perfect      
Random                an</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / Pattern / Spiral                   
Spiral                S</p>

<p class=Fixed>Create / Pattern / Diagonal                 
Diagonal              D</p>

<p class=Fixed>Create / Pattern / Segment                  
Segment               L</p>

<p class=Fixed>Create / Pattern / Nested Fractal           
Fractal               O</p>

<p class=Fixed>Create / Pattern / Hilbert Curve            
Hilbert               aH</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / 3D / Weave                         
Weave                 V</p>

<p class=Fixed>Create / 3D / 3D                             3D                   
Q</p>

<p class=Fixed>Create / 3D / 4D                            
4D                    R</p>

<p class=Fixed>Create / 3D / Planair                       
Planair               J</p>

<p class=Fixed>Create / 3D / Hyper                         
Hyper                 ah</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / Crack                               Crack                
K</p>

<p class=Fixed>Create / Cavern                             
Cavern                av</p>

<p class=Fixed>Create / Arrow                              
Arrow                 A</p>

<p class=Fixed>Create / Tilt                               
Tilt                  at</p>

<p class=Fixed>Create / Recursive Fractal                  
Fractal2              ax</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / Infinite / Start                   
InfiniteStart         ai</p>

<p class=Fixed>Create / Infinite / Continue                
Infinite              I</p>

<p class=Fixed>Create / Infinite / End                      InfiniteEnd          
aI</p>

<p class=Fixed>Create / Infinite / Restart                  InfiniteRestart</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / Omega (Shapes) / Gamma (Square)     Gamma                
aq</p>

<p class=Fixed>Create / Omega (Shapes) / Theta (Circle)    
Theta                 W</p>

<p class=Fixed>Create / Omega (Shapes) / Delta (Triangle)  
Delta                 Y</p>

<p class=Fixed>Create / Omega (Shapes) / Sigma (Hexagon)   
Sigma                 X</p>

<p class=Fixed>Create / Omega (Shapes) / Upsilon (Octagon) 
Upsilon               au</p>

<p class=Fixed>Create / Omega (Shapes) / Zeta (8 Way)      
Zeta                  Z</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / Labyrinth / Current Labyrinth      
Labyrinth             C</p>

<p class=Fixed>Create / Labyrinth / Labyrinth Settings...  
DlgLabyrinth          cl</p>

<p class=Fixed>Create / Labyrinth / Classical               Classical</p>

<p class=Fixed>Create / Labyrinth / Chartres                Chartres</p>

<p class=Fixed>Create / Labyrinth / Cretan                  Cretan</p>

<p class=Fixed>Create / Labyrinth / Man In The Maze         ManInTheMaze</p>

<p class=Fixed>Create / Labyrinth / Flat Classical          FlatClassical</p>

<p class=Fixed>Create / Labyrinth / Flat Chartres           FlatChartres</p>

<p class=Fixed>Create / Labyrinth / Chartres Replica        ChartresReplica</p>

<p class=Fixed>Create / Labyrinth / Custom                  Custom</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / Partial Create / Perfect At Dot    
PartialPerfect        cP</p>

<p class=Fixed>Create / Partial Create / Braid Add Walls   
PartialBraid          aB</p>

<p class=Fixed>Create / Partial Create / Unicursal Thinned  PartialUnicursal     
cU</p>

<p class=Fixed>Create / Partial Create / Recursive At Dot   PartialRecursive</p>

<p class=Fixed>Create / Partial Create / Prim's At Dot      PartialPrim</p>

<p class=Fixed>Create / Partial Create / Kruskal Passages   PartialKruskal</p>

<p class=Fixed>Create / Partial Create / Tree At Dot        PartialTree</p>

<p class=Fixed>Create / Partial Create / Weave At Dot      
PartialWeave          cV</p>

<p class=Fixed>Create / Partial Create / Crack Add Walls   
PartialCrack          cK</p>

<p class=Fixed>Create / Partial Create / Cavern At Dot      PartialCavern</p>

<p class=Fixed>Create / Partial Create / Zeta At Dot        PartialZeta</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Create / Polished Mazes                     
Polish                /</p>

<p class=Fixed>Create / Create Settings...                 
DlgCreate             M</p>

<p class=Section2>********************  Solve Menu  ********************</p>

<p class=Fixed>Solve / Fill Dead Ends                       DeadEnd               F</p>

<p class=Fixed>Solve / Fill Cul-De-Sacs                     CulDeSac</p>

<p class=Fixed>Solve / Fill Blind Alleys                    BlindAlley</p>

<p class=Fixed>Solve / Fill Collisions                      Collision</p>

<p class=Fixed>Solve / Find A Path                          SolveRecursive</p>

<p class=Fixed>Solve / Find Shortest Path                   Shortest</p>

<p class=Fixed>Solve / Find Shortest Paths                  Shortests</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Solve / Wall Follow / Follow Wall Left       FollowLeft</p>

<p class=Fixed>Solve / Wall Follow / Follow Wall Right      FollowRight</p>

<p class=Fixed>Solve / Wall Follow / Pledge Algorithm Left  PledgeLeft</p>

<p class=Fixed>Solve / Wall Follow / Pledge Algorithm Right PledgeRight</p>

<p class=Fixed>Solve / Wall Follow / Chain Algorithm        Chain</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Solve / 3D / Fill Weave Dead Ends            DeadEndWeave</p>

<p class=Fixed>Solve / 3D / Fill 4D Dead Ends               DeadEnd4D</p>

<p class=Fixed>Solve / 3D / Fill Hyper Dead Ends            SolveHyper</p>

<p class=Fixed>Solve / 3D / Find Recursive Fractal          SolveFractal2</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Solve / Tremaux's Algorithm                  Tremaux</p>

<p class=Fixed>Solve / Mark Dead Ends                      
MarkDeadEnd           G</p>

<p class=Fixed>Solve / Mark Cul-De-Sacs                     MarkCulDeSac</p>

<p class=Fixed>Solve / Mark Blind Alleys                    MarkBlindAlley</p>

<p class=Fixed>Solve / Mark Collisions                      MarkCollision</p>

<p class=Fixed>Solve / Fill Single Dead Ends                FillDeadEnd</p>

<p class=Fixed>Solve / Show Bottlenecks                     Bottleneck</p>

<p class=Fixed>Solve / Flood Passages                       FloodPassage</p>

<p class=Fixed>Solve / Flood Walls Left                     FloodWallLeft</p>

<p class=Fixed>Solve / Flood Walls Right                    FloodWallRight</p>

<p class=Section2>********************  Draw Menu  ********************</p>

<p class=Fixed>Draw / Draw Settings...                      DlgDraw              
ad</p>

<p class=Fixed>Draw / Obscure Draw Settings...             
DlgDraw2              aD</p>

<p class=Fixed>Draw / Render Bitmap Overview                Overview</p>

<p class=Fixed>Draw / Render Pyramid                        Pyramid</p>

<p class=Fixed>Draw / Life Generate                         Life                  aL</p>

<p class=Fixed>Draw / Open Wireframe...                     DlgOpenWire</p>

<p class=Fixed>Draw / Save Wireframe...                     DlgSaveWire</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Draw / Wireframe File / Save Picture...      DlgSavePicture</p>

<p class=Fixed>Draw / Wireframe File / Copy Picture         CopyPicture</p>

<p class=Fixed>Draw / Wireframe File / Save Vector...       DlgSaveVector</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>Draw / Make Wireframe Bitmap Overview        MakeWire</p>

<p class=Fixed>Draw / Render Wireframe Perspective          WirePerspective</p>

<p class=Fixed>Draw / Render Wireframe Aerial               Aerial</p>

<p class=Fixed>Draw / Open Patches...                       DlgOpenPatch</p>

<p class=Fixed>Draw / Save Patches...                       DlgSavePatch</p>

<p class=Fixed>Draw / Make Patch Bitmap Overview            MakePatch</p>

<p class=Fixed>Draw / Render Patch Perspective              PatchPerspective</p>

<p class=Fixed>Draw / Convert Patches To Wireframe          PatchToWire</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=operation>OPERATIONS</a></p>

</div>

<p class=A>Some operations take string parameters that are considered formatted
strings. A formatted string is first evaluated before being used, where certain
character sequences in it get translated to other things. When a string is
formatted, \n becomes a line break, \r becomes a carriage return, \t
becomes a tab, and \s becomes a space. The sequence @x where x is a
letter from a-z or a number expands to the number contained in that custom
variable. The sequence $# where # is a number expands to the string
contained in that custom variable, while the sequence $x where x is a
letter from a-z expands to the custom string indexed by custom variable @x.
Finally, \\ reduces to a single \, @@ reduces to a single @, and $$
reduces to a single $.</p>

<p class=Section2>********************  Dialog and file operations 
********************</p>

<p class=A><span class=N>Open &lt;file&gt;:</span> Opens the file in the string
&lt;file&gt;, regardless of its type. This accesses the functionality of the Open...
command without bringing up a dialog.</p>

<p class=A><span class=N>OpenBitmap &lt;file&gt;:</span> Opens the Windows
bitmap file in the string &lt;file&gt;. This accesses the functionality of the Open
Bitmap... command without bringing up a dialog.</p>

<p class=A><span class=N>OpenText &lt;file&gt;:</span> Opens the text file in
the string &lt;file&gt; into the main monochrome bitmap. This accesses the
functionality of the Open Text... command without bringing up a dialog.</p>

<p class=A><span class=N>OpenX11 &lt;file&gt;:</span> Opens the X11 bitmap in
the string &lt;file&gt; into the main monochrome bitmap. This accesses the
functionality of the X11 Bitmap / Open... command without bringing up a
dialog.</p>

<p class=A><span class=N>Open3D &lt;file&gt;:</span> Opens the Daedalus 3D
bitmap in the string &lt;file&gt; into the main monochrome bitmap. This
accesses the functionality of the 3D Bitmap / Open... command without
bringing up a dialog.</p>

<p class=A><span class=N>OpenDB &lt;file&gt;:</span> Opens the Daedalus bitmap in
the string &lt;file&gt;. Daedalus bitmaps are created with the SaveDB
operation.</p>

<p class=A><span class=N>OpenScript &lt;file&gt;:</span> Opens and runs the
Daedalus script in the string &lt;file&gt;. This accesses the functionality of
the Open Script... command without bringing up a dialog.</p>

<p class=A><span class=N>OpenTarga &lt;file&gt;:</span> Opens the Targa bitmap
in the string &lt;file&gt; into the color bitmap. This accesses the
functionality of the Color Targa File / Open... command without bringing up a
dialog.</p>

<p class=A><span class=N>OpenPaint &lt;file&gt;:</span> Opens the Paint bitmap
file in the string &lt;file&gt; into the color bitmap. This accesses the
functionality of the DlgOpenPaint operation command without bringing up a
dialog.</p>

<p class=A><span class=N>OpenWire &lt;file&gt;:</span> Opens the Daedalus
wireframe file in the string &lt;file&gt;. This accesses the functionality of
the Open Wireframe... command without bringing up a dialog.</p>

<p class=A><span class=N>OpenPatch &lt;file&gt;:</span> Opens the Daedalus
patch file in the string &lt;file&gt;. This accesses the functionality of the Open
Patches... command without bringing up a dialog.</p>

<p class=A><span class=N>DlgOpenPaint:</span> Brings up a dialog allowing one
to select a file, and then loads that file as a 256 color Paint bitmap file
(.PCX extension) into the color bitmap. This can be used to import the PCX
format screenshots generated by certain games into the program.</p>

<p class=A><span class=N>EmbedX11: </span>This is like OpenX11 except the X11
bitmap is embedded in the current Daedalus script file instead of in a separate
file. This allows loading a monochrome bitmap within a script without having to
have it in a separate file. Starting with the next line following this
operation in the script file, should be the text of an X11 bitmap, which will
be loaded as if it were in a separate file. Afterward the script file will
continue executing at the line following the bitmap text. This should only be
run inside a script. If this is run outside a script, it will behave like the
DlgX11 command and the user will be prompted for a file.</p>

<p class=A><span class=N>Embed3D: </span>This is like EmbedX11 except a
Daedalus 3D file embedded in the current script will be loaded.</p>

<p class=A><span class=N>EmbedDW: </span>This is like EmbedX11 except a
Daedalus wireframe file embedded in the current script will be loaded.</p>

<p class=A><span class=N>EmbedDP: </span>This is like EmbedX11 except a
Daedalus patch file embedded in the current script will be loaded.</p>

<p class=A><span class=N>EmbedDB: </span>This is like EmbedX11 except a
Daedalus bitmap file embedded in the current script will be loaded.</p>

<p class=A><span class=N>SaveBitmap &lt;file&gt;:</span> Saves the active
bitmap to a Windows bitmap file in the string &lt;file&gt;. This accesses the
functionality of the Save Bitmap... command without bringing up a dialog.</p>

<p class=A><span class=N>SaveText &lt;file&gt;:</span> Saves the main
monochrome bitmap to a text file in the string &lt;file&gt;. This accesses the
functionality of the Save Text... command without bringing up a dialog.</p>

<p class=A><span class=N>SaveDOSBlock &lt;file&gt;:</span> Saves the main
monochrome bitmap to a DOS block character text file in the string
&lt;file&gt;. This accesses the functionality of the DOS Text / Save Blocks...
command without bringing up a dialog.</p>

<p class=A><span class=N>SaveDOSLine &lt;file&gt;:</span> Saves the main
monochrome bitmap to a DOS line character text file in the string &lt;file&gt;.
This accesses the functionality of the DOS Text / Save Lines... command
without bringing up a dialog.</p>

<p class=A><span class=N>SaveDOSLine2 &lt;file&gt;:</span> Saves the main
monochrome bitmap to a DOS double line character text file in the string
&lt;file&gt;. This accesses the functionality of the DOS Text / Save Double
Lines... command without bringing up a dialog.</p>

<p class=A><span class=N>SaveX11 &lt;file&gt;:</span> Saves the main monochrome
bitmap to an X11 bitmap in the string &lt;file&gt;. This accesses the
functionality of the X11 Bitmap / Save Normal... command without bringing up
a dialog.</p>

<p class=A><span class=N>SaveX11Comp &lt;file&gt;:</span> Saves the main
monochrome bitmap to a compressed X11 bitmap in the string &lt;file&gt;. This
accesses the functionality of the X11 Bitmap / Save Compressed... command
without bringing up a dialog.</p>

<p class=A><span class=N>SaveX11Super &lt;file&gt;:</span> Saves the main
monochrome bitmap to a supercompressed X11 bitmap in the string &lt;file&gt;.
This accesses the functionality of the X11 Bitmap / Save Supercompressed...
command without bringing up a dialog.</p>

<p class=A><span class=N>Save3D &lt;file&gt;:</span> Saves the 3D bitmap in the
main bitmap to a Daedalus 3D bitmap in the string &lt;file&gt;. This accesses
the functionality of the 3D Bitmap / Save Normal... command without bringing
up a dialog.</p>

<p class=A><span class=N>Save3DComp &lt;file&gt;:</span> Saves the 3D bitmap in
the main bitmap to a compressed Daedalus 3D bitmap in the string &lt;file&gt;,
where each character in the file covers four pixels.</p>

<p class=A><span class=N>Save3DSuper &lt;file&gt;:</span> Saves the 3D bitmap
in the main bitmap to a supercompressed Daedalus 3D bitmap in the string
&lt;file&gt;. This accesses the functionality of the 3D Bitmap / Save
Supercompressed... command without bringing up a dialog.</p>

<p class=A><span class=N>SaveDB &lt;file&gt;:</span> Saves the active bitmap to
a Daedalus bitmap in the string &lt;file&gt;. Daedalus bitmaps are a custom
format which stores bitmaps using only ASCII characters, and have some
compression too.</p>

<p class=A><span class=N>SaveTarga &lt;file&gt;:</span> Saves the color bitmap
to a Targa bitmap in the string &lt;file&gt;. This accesses the functionality
of the Color Targa File / Save... command without bringing up a dialog.</p>

<p class=A><span class=N>SaveWire &lt;file&gt;:</span> Saves the wireframe data
in memory to a Daedalus wireframe file in the string &lt;file&gt;. This
accesses the functionality of the Save Wireframe... command without bringing
up a dialog.</p>

<p class=A><span class=N>SavePatch &lt;file&gt;:</span> Saves the patch data in
memory to a Daedalus patch file in the string &lt;file&gt;. This accesses the
functionality of the Save Patches... command without bringing up a dialog.</p>

<p class=A><span class=N>SavePicture &lt;file&gt;:</span> Saves the wireframe
image in memory to a Windows metafile in the string &lt;file&gt;. This accesses
the functionality of the Draw / Picture File / Save Wireframe Picture...
command without bringing up a dialog.</p>

<p class=A><span class=N>SaveSolids &lt;file&gt;:</span> Generates the
solids.dp file thats part of the Daedalus distribution, and saves it to a
file. This doesnt ever need to be run in a standard install, because that file
has already been generated.</p>

<p class=A><span class=N>Size &lt;x&gt; &lt;y&gt; &lt;flag1&gt; &lt;flag2&gt;:</span>
Resizes the main monochrome bitmap. This accesses the functionality of the Size...
command when operating on a monochrome bitmap without bringing up the dialog.
If &lt;flag1&gt; is false, this does Set Lower Right Bound, if true this does
Shift Down And Right By. If &lt;flag2&gt; is true, the bitmap is cleared
after being resized.</p>

<p class=A><span class=N>SizeC &lt;x&gt; &lt;y&gt; &lt;flag1&gt; &lt;flag2&gt;:</span>
Like the Size operation but resizes the main color bitmap. This accesses the
functionality of the Size... command when operating on a color bitmap without
bringing up the dialog. If &lt;flag1&gt; is false this does Set Lower Right Bound,
and if true this does Shift Down And Right By. If &lt;flag2&gt; is true, the
bitmap is set to black after being resized.</p>

<p class=A><span class=N>Zoom &lt;x&gt; &lt;y&gt; &lt;flag&gt; &lt;num&gt;:</span>
Zooms the active bitmap. This accesses the functionality of the Zoom...
command without bringing up the dialog. If &lt;flag&gt; is false, this does Zoom
By Factor, if true this does Zoom To Size. If &lt;num&gt; is 0 this does Drop
Lines When Shrinking, if 1 this does Preserve On When Shrinking, if 2 this
does Tessellate Instead Of Zoom.</p>

<p class=A><span class=N>Flip3D &lt;num1&gt; &lt;num2&gt;:</span> Flips or
rotates the 3D bitmap in the active bitmap. This accesses the functionality of
the Flip And Rotate / 3D Bitmap... command without bringing up the dialog. If
&lt;num1&gt; is 0 this affects the X axis, if 1 this affects the Y axis, if 2
this affects the Z axis. If &lt;num2&gt; is 0 this does Flip, if 1 this does Rotate
Left Or Forward, if 2 this does Rotate Right Or Forward, if 3 this does Rotate
Across.</p>

<p class=A><span class=N>MazeSize &lt;x&gt; &lt;y&gt; &lt;flags&gt;:</span>
Resizes the Maze in the main monochrome bitmap. This accesses the functionality
of the Maze Size... command without bringing up the dialog. If &lt;flags&gt;
is 2 or more, the bitmap will have odd dimensions and not have a blank row and
column of pixels at the right and bottom edges. If &lt;flags&gt; is odd, the
Maze bitmap is cleared after being resized.</p>

<p class=A><span class=N>MazeSizeC &lt;x&gt; &lt;y&gt; &lt;flags&gt;:</span>
Like the MazeSize operation but resizes the Maze in the main color bitmap. This
accesses the functionality of the Maze Size... command when operating on a
color bitmap without bringing up the dialog. If &lt;flags&gt; is 2 or more, the
bitmap will have odd dimensions and not have a blank row and column of pixels
at the right and bottom edges. If &lt;flags&gt; is odd, the Maze bitmap is
cleared after being resized.</p>

<p class=A><span class=N>Bias &lt;x0&gt; &lt;x1&gt; &lt;y0&gt; &lt;y1&gt;:</span>
Zooms the main monochrome or color bitmap with different magnifications applied
to even and odd coordinate pixels. This accesses the functionality of the Zoom
Bias... command without bringing up the dialog.</p>

<p class=A><span class=N>Replace &lt;color1&gt; &lt;color2&gt; &lt;flag&gt;:</span>
Replaces all instances of &lt;color1&gt; with &lt;color2&gt; in the color
bitmap. This accesses the functionality of the Replace Color... command
without bringing up the dialog. The colors in &lt;color1&gt; and &lt;color2&gt;
may be 24 bit color numbers or strings, where &lt;color2&gt; may be a pattern
string. If &lt;flag&gt; is true, the colors are swapped instead of one replaced
with the other.</p>

<p class=A><span class=N>Brightness &lt;num1&gt; &lt;num2&gt;:</span> Changes
the brightness of the pixels in the color bitmap, or does some other bitmap
transformation. This accesses the functionality of the Brightness... command
without bringing up the dialog. The brightness number is in &lt;num1&gt;. If
&lt;num2&gt; is 0 this does Brighten All By Factor, if 1 this does Brighten
All By Offset, if 2 this does Brighten All By Multiplier, if 3 this does Limit
Brightness To Value, if 4 this does Rotate All By Degree, and if 5 this does
Twist Middle By Degree.</p>

<p class=Section2>********************  Control flow operations 
********************</p>

<p class=A><span class=N>If &lt;flag&gt; &lt;string&gt;:</span> If &lt;flag&gt;
is true, &lt;string&gt; gets executed as a command line. Like the if
statement in C.</p>

<p class=A><span class=N>IfElse &lt;flag&gt; &lt;string1&gt; &lt;string2&gt;:</span>
If &lt;flag&gt; is true, &lt;string1&gt; gets executed as a command line,
otherwise &lt;string2&gt; gets executed as a command line. Like the if / else
statement in C.</p>

<p class=A><span class=N>SwitchSgn &lt;num&gt; &lt;string1&gt; &lt;string2&gt;
&lt;string3&gt;:</span> If &lt;num&gt; is negative, &lt;string1&gt; gets
executed as a command line. If &lt;num&gt; is 0, &lt;string2&gt; gets executed
as a command line. If &lt;num&gt; is positive, &lt;string3&gt; gets executed as
a command line.</p>

<p class=A><span class=N>DoCount &lt;num&gt; &lt;string&gt;:</span> Executes
&lt;string&gt; as a command line &lt;num&gt; times.</p>

<p class=A><span class=N>While &lt;string1&gt; &lt;string2&gt;:</span>
Evaluates &lt;string1&gt; as an expression. If true, executes &lt;string2&gt;
as a command line, then repeats. Keeps reevaluating and executing until the
expression is no longer true. Like the while statement in C.</p>

<p class=A><span class=N>DoWhile &lt;string1&gt; &lt;string2&gt;:</span>
Executes &lt;string2&gt; as a command line, then evaluates &lt;string1&gt; as
an expression. If true, then executes and evaluates again, where this repeats
until the expression is no longer true. Like the do / while statement in C.</p>

<p class=A><span class=N>For &lt;var&gt; &lt;num1&gt; &lt;num2&gt;
&lt;string&gt;:</span> Sets the custom variable indicated by &lt;var&gt; to
&lt;num1&gt;. While the variable less than or equal to &lt;num2&gt;, execute
&lt;string&gt; as a command line, then increment the variable. If &lt;var&gt;
is a number it indicates the index of the custom variable, else if &lt;var&gt;
is a string (e.g. a) it indicates the custom variable directly. In most cases
one wants to specify the variable as a string like a instead of a number like
@a. The former makes @a itself loop, while the latter makes the custom variable
pointed to by the value of @a loop. Similar to the for loop in various
languages.</p>

<p class=A><span class=N>ForStep &lt;var&gt; &lt;num1&gt; &lt;num2&gt;
&lt;num3&gt; &lt;string&gt;:</span> Like the For operation except the variable
gets &lt;num3&gt; added to it each iteration, instead of just being
incremented. The loop exits when the variable is no longer between &lt;num1&gt;
and &lt;num2&gt;.</p>

<p class=A><span class=N>//:</span> Comment. Stops executing the current
command line. Since the rest of the command line always gets skipped, this
causes the rest of the command line to act as a comment. Like the // comment
token in C.</p>

<p class=A><span class=N>Continue:</span> Stops executing the current command
line, and also stops executing the surrounding command line. If the surrounding
command line is part of a loop, the loops next iteration will begin. Like the continue
statement in C.</p>

<p class=A><span class=N>Break:</span> Stops executing the current command line,
and also stops executing the surrounding command line. If the surrounding
command line is part of a loop, the loop operation will immediately terminate. If
this operation appears at the top level in a script file, the remaining lines
in the script will be skipped. This is most often used to break out of one of
the above looping operations. Like the break statement in C.</p>

<p class=A><span class=N>Return:</span> Stops executing the current command
line, and also stops executing any number of surrounding command lines within
the current macro, returning control to the macros caller. Behaves like Halt
if not within a macro. Like the return statement in C.</p>

<p class=A><span class=N>Halt:</span> Stops executing the current command line,
and also completely stops executing any number of surrounding command lines or
loops, including remaining lines in a script file. Like the end command in
BASIC.</p>

<p class=A><span class=N>Restart:</span> Stops executing the current command
line, then starts executing it from the beginning again. This will cause an
infinite loop unless some other operation breaks out of the command line.</p>

<p class=A><span class=N>Do &lt;string&gt;:</span> Simply executes
&lt;string&gt; as a command line once. Useful if a command line is stored in a
custom string instead of a macro.</p>

<p class=A><span class=N>DoWait &lt;string&gt;:</span> Like the Do operation
except the mouse pointer will be set to the wait or hourglass icon until the
command line finishes. Useful for indicating slow operations within a script.</p>

<p class=Section2>********************  Daedalus specific operations 
********************</p>

<p class=A><span class=N>DefineMacro &lt;num&gt; &lt;string1&gt;
&lt;string2&gt;:</span> Sets macro number &lt;num&gt; to be &lt;string1&gt;. If
&lt;num&gt; is between 1 and 48, the appropriate command on the Run Macro
submenu will have its menu text set to &lt;string2&gt;. This accesses the
functionality of the Define Macro button in the Enter Command Line... command
without bringing up the dialog.</p>

<p class=A><span class=N>Macro &lt;num&gt;:</span> Runs macro number
&lt;num&gt;. Note the first 48 macros, since they exist on menus, also have
commands which can run them directly.</p>

<p class=A><span class=N>EmbedMacro &lt;num&gt; &lt;string&gt;:</span> Similar
to DefineMacro, this sets macro number &lt;num&gt;. If &lt;num&gt; is between 1
and 48, the appropriate command on the Run Macro submenu will have its menu text
set to &lt;string&gt;. The actual macro text will be embedded in the current
Daedalus script file in the following lines, up until the next blank line. That
allows a long macro to be spread across multiple lines, which is more readable.
Within each line, leading spaces will be removed, so indenting can be applied
without making the macro itself any longer. You can also embed comments, in
which lines whose first non-whitespace is // will be ignored. This should only
be run inside a script, and will do nothing outside that context.</p>

<p class=A><span class=N>Embed:</span> Similar to EmbedMacro, this allows a
command line to be spread over multiple lines. The actual command line will be
embedded in the current Daedalus script file in the following lines, up until
the next blank line. That allows a long command line be spread across multiple
lines, which is more readable. Within each line, leading spaces will be
removed, so indenting can be applied without making the macro itself any
longer. This should only be run inside a script, and will do nothing outside
that context.</p>

<p class=A><span class=N>DefineConst &lt;string&gt;:</span> Defines a sequence
of named numeric constants. Parameter &lt;string&gt; is a space separated list
of names. Each name will be assigned to the next number in sequence, starting
with 0. For example, DefineConst Cat Dog Horse will set Cat to 0, Dog to 1,
and Horse to 2. If a token is a number, it will instead set the constant to
assign to the next name. If a number is prefixed with + or -, the number
instead of being incremented by one will be adjusted by the specified offset.
For example, DefineConst Cat 10 Dog +5 Horse will set Cat to 0, Dog to 10,
and Horse to 15.</p>

<p class=B>Afterward macros can reference these constants by name with the %
prefix. For example, after the above the parameter %Dog will be the constant
value 10. Similarly, @Dog will contain the value within custom variable
number 10, and $Dog will contain the value within custom string 10, which
allows named numeric and string variables. Finally *Dog as an action will
call macro 10, which allows named functions. Having *Dog in a parameter
context will call the function and return whatevers in @z. After DefineConst
is invoked, @z will contain whether the operation failed for any reason, such
as having duplicate names anywhere in the list. A script can call DefineConst
at the beginning to name macros and variables, and then halt if there were any
errors.</p>

<p class=A><span class=N>ClearEvents:</span> Resets all macro events to 0. This
means all fields in the Macro Events dialog and includes all hidden scripting
only macro events.</p>

<p class=A><span class=N>SetVar &lt;var&gt; &lt;num&gt;:</span> Sets custom
variable &lt;var&gt; to value &lt;num&gt;. If &lt;var&gt; is a number it
indicates the index of the custom variable, else if &lt;var&gt; is a string
(e.g. a) it indicates the custom variable directly.</p>

<p class=A><span class=N>SetVars &lt;var&gt; &lt;num&gt; &lt;string&gt;:</span>
Sets a range of custom variables to a set of constants. This sets &lt;num&gt;
variables starting with custom variable &lt;var&gt;. There should be
&lt;num&gt; values contained in &lt;string&gt;, separated with spaces. Each
value may be a numeric or color constant, or a custom variable reference like
@a.</p>

<p class=A><span class=N>SwapVar &lt;var1&gt; &lt;var2&gt;:</span> Swaps custom
variables &lt;var1&gt; and &lt;var2&gt;.</p>

<p class=A><span class=N>Local &lt;string&gt;:</span> Stores a copy of the
custom numeric variables listed in &lt;string&gt;. The characters in
&lt;string&gt; should range from a-z. When the current command line is
finished, the saved values will be restored to the variables in question. This
operation works properly when nested, and allows complicated scripts to have
what amounts to local variables which can be changed within a context but dont
affect the values of those variables used in outer contexts.</p>

<p class=A><span class=N>SetString &lt;var&gt; &lt;format&gt;:</span> Sets
custom string &lt;var&gt; to formatted string &lt;format&gt;. If &lt;var&gt; is
a number it indicates the index of the custom string, else if &lt;var&gt; is a
string (e.g. a) it corresponds to a custom string directly.</p>

<p class=A><span class=N>SetStrings &lt;var&gt; &lt;num&gt; &lt;string&gt;:</span>
Sets a range of custom strings to a set of constant strings. The first
character in &lt;string&gt; indicates a separator character, where there should
be &lt;num&gt; strings contained in &lt;string&gt;, separated by this
character.</p>

<p class=A><span class=N>SwapString &lt;var1&gt; &lt;var2&gt;:</span> Swaps
custom strings &lt;var1&gt; and &lt;var2&gt;.</p>

<p class=A><span class=N>AppendString &lt;var&gt; &lt;string&gt;:</span>
Appends &lt;string&gt; to custom string &lt;var&gt;. If &lt;var&gt; is a number
it indicates the index of the custom string, else if &lt;var&gt; is a string
(e.g. a) it indicates the custom string directly.</p>

<p class=A><span class=N>SetChar &lt;var&gt; &lt;num&gt; &lt;char&gt;:</span>
Sets character number &lt;num&gt; in custom string &lt;var&gt; to value
&lt;char&gt;. Strings start at character 0. This does nothing if the custom
string is empty or &lt;num&gt; is beyond the end of the string. If &lt;char&gt;
is a number it indicates the ASCII value of the new character, else if
&lt;char&gt; is a string (e.g. !) it indicates the character directly.</p>

<p class=A><span class=N>SetStringNum &lt;var&gt; &lt;num&gt; &lt;digits&gt;:</span>
Sets custom string &lt;var&gt; to a string containing the number &lt;num&gt;.
If &lt;num&gt; contains fewer than &lt;digits&gt; digits, it will be prefixed
with 0 characters. If you dont want leading zeros, its easier to use
SetString and let it expand custom numeric variables in the formatted string.
If &lt;var&gt; is a number it indicates the index of the custom string, else if
&lt;var&gt; is a string (e.g. a) it corresponds to a custom string directly.</p>

<p class=A><span class=N>SetStringReal &lt;var&gt; &lt;num&gt; &lt;digits&gt;:</span>
Sets custom string &lt;var&gt; to a string containing a floating point number
represented by &lt;num&gt;. There will be &lt;digits&gt; digits to the right of
the decimal point, or in other words this outputs &lt;num&gt; with a decimal
point &lt;digits&gt; places from the right end. If &lt;var&gt; is a number it
indicates the index of the custom string, else if &lt;var&gt; is a string (e.g.
a) it corresponds to a custom string directly.</p>

<p class=A><span class=N>CopyMask &lt;num1&gt; &lt;num2&gt;:</span> Copies
monochrome bitmap &lt;num1&gt; to bitmap &lt;num2&gt;. Bitmaps 0 and beyond
indicate custom texture mask bitmaps. Also bitmap -1 is the main bitmap, bitmap
-2 is the temporary bitmap, and bitmap -3 is the extra bitmap.</p>

<p class=A><span class=N>SwapMask &lt;num1&gt; &lt;num2&gt;:</span> Swaps
monochrome bitmaps &lt;num1&gt; and &lt;num2&gt;. Note the main bitmap always
exists, so its not allowed to be swapped with a bitmap thats empty.</p>

<p class=A><span class=N>DeleteMask &lt;num&gt;:</span> Deletes monochrome
bitmap &lt;num&gt;. Note the main bitmap always exists, so its not allowed to
be deleted.</p>

<p class=A><span class=N>CopyTexture &lt;num1&gt; &lt;num2&gt;:</span> Copies
color bitmap &lt;num1&gt; to bitmap &lt;num2&gt;. Bitmaps 0 and beyond indicate
custom texture bitmaps. Also bitmap -1 is the main color bitmap, bitmap -2 is
the temporary color bitmap, and bitmap -3 is the extra color bitmap. Bitmap -4
contains the scene most recently displayed as the perspective inside view, and
bitmap -5 contains the rainbow sprite most recently displayed over the
perspective inside view.</p>

<p class=A><span class=N>SwapTexture &lt;num1&gt; &lt;num2&gt;:</span> Swaps
color bitmaps &lt;num1&gt; and &lt;num2&gt;.</p>

<p class=A><span class=N>DeleteTexture &lt;num&gt;:</span> Deletes color bitmap
&lt;num&gt;.</p>

<p class=A><span class=N>MoveCloud &lt;cloud&gt; &lt;distance&gt;:</span> Moves
one or more clouds horizontally in the perspective inside view. The
&lt;cloud&gt; parameter is the index of the cloud to move, where if invalid
(e.g. negative) all clouds will be moved. The &lt;distance&gt; parameter is the
offset to move the cloud(s) to the right. Clouds can have 16384 different
positions, where the offset may range from -16383 to 16383. If the distance is
invalid (i.e. a large positive or negative number) then the cloud(s) will be
moved proportionally based on their index, with farther or lower index clouds
moving slower.</p>

<p class=A><span class=N>Message &lt;format&gt;:</span> Displays a message box
containing formatted string &lt;format&gt;, and pauses until the user clicks
OK.</p>

<p class=A><span class=N>MessageAsk &lt;format&gt; &lt;num&gt;:</span> Displays
a message box of type &lt;num&gt; containing formatted sting &lt;format&gt;,
and pauses until the user clicks a button in it. Parameter &lt;num&gt; should
contain a number from 0-5, where message box type 0 contains the button OK,
type 1 contains OK and Cancel buttons, type 2 contains Retry and Cancel, type 3
contains Yes and No, type 4 contains Yes and No and Cancel, and type 5 contains
Abort and Retry and Ignore. Afterward @z contains the button clicked, where 1
means OK or Yes or Retry was clicked, 0 means No or Ignore, and -1 means Cancel
or Abort.</p>

<p class=A><span class=N>MessageInside &lt;format&gt; &lt;num&gt;:</span>
Displays formatted string &lt;format&gt; as a line of text in the perspective
inside view, in the same font used for the Compass and Cell Location. The text
is horizontally centered at row &lt;num&gt;. Row 0 is considered the top of the
window, where negative rows start from the bottom of the window. Note cell
location is displayed at row -2, and the compass at -3, so if you display at
these rows your text can get overlapped, in which case you may want to turn on
fNoLocation and fNoCompass to suppress normal output. This operation should
only be run during the After Redraw Inside macro event, where this does nothing
outside that context.</p>

<p class=A><span class=N>GetString &lt;format&gt; &lt;var&gt;:</span> Brings up
a dialog which prompts the user to enter a string. The formatted string
&lt;format&gt; gets displayed as a caption in the dialog. If the user clicks OK
instead of canceling the dialog, the string entered will be stored in custom
string &lt;var&gt;. Afterward @z will contain 1 if the dialog was cancelled, 0
otherwise.</p>

<p class=A><span class=N>GetString2 &lt;format1&gt; &lt;format2&gt;
&lt;var&gt;:</span> Like GetString except prompts the user to enter two
strings. The formatted strings &lt;format1&gt; and &lt;format2&gt; get
displayed as captions in the dialog. If the user clicks OK instead of canceling
the dialog, the strings entered will be stored in custom string slots
&lt;var&gt; and &lt;var+1&gt;.</p>

<p class=A><span class=N>GetString3 &lt;format1&gt; &lt;format2&gt;
&lt;format3&gt; &lt;var&gt;:</span> Like GetString except prompts the user to
enter three strings. The formatted strings &lt;format1&gt;, &lt;format2&gt;,
and &lt;format3&gt; get displayed as captions in the dialog. If the user clicks
OK instead of canceling the dialog, then the strings entered will be stored in
custom string slots &lt;var&gt;, &lt;var+1&gt;, and &lt;var+2&gt;.</p>

<p class=A><span class=N>DisableAll:</span> Disables all commands. Trying to
run a disabled command by selecting it from a menu or keyboard shortcut will
display a warning. Disabled commands may still be run through scripting.</p>

<p class=A><span class=N>EnableAll:</span> Enables all commands disabled
through the DisableAll or Disable operations. This only enables disabled
commands, and wont affect triggers set through OnCommandAll or OnCommand
operations.</p>

<p class=A><span class=N>Disable &lt;command&gt;:</span> Disables the command
indicated by &lt;command&gt;. If &lt;command&gt; is a number it indicates the
index of the command as returned by the Command function, else if
&lt;command&gt; is a string (e.g. DlgOpen or o) it corresponds to the
command directly. Note the About Daedalus command can never be disabled, where
attempting to disable it does nothing.</p>

<p class=A><span class=N>Enable &lt;command&gt;:</span> Enables the command indicated
by &lt;command&gt;.</p>

<p class=A><span class=N>OnCommandAll &lt;num&gt;:</span> Defines a trigger for
all commands, such that when any command is selected from a menu or keyboard
shortcut, macro &lt;num&gt; will run first. When this macro is run, @x contains
the ASCII value of the key pressed to invoke the command, if any, otherwise @x
is zero. @y contains the index of the command about to be run, where this index
is the same as returned by the Command function. After the macro returns, if @z
is non-zero, the command wont run. Note a disabled command is considered a
special type of trigger, where a command cant be both disabled and have a
macro trigger at the same time. Note the About Daedalus command can never have
a trigger, where attempting to define one for it does nothing.</p>

<p class=A><span class=N>OnCommand &lt;command&gt; &lt;num&gt;:</span> Defines
a trigger for the command indicated by &lt;command&gt;, such that when that
command is selected from a menu or keyboard shortcut, macro &lt;num&gt; will
run first.</p>

<p class=A><span class=N>DoCommand &lt;command&gt;:</span> Run the command
indicated by &lt;command&gt;.</p>

<p class=A><span class=N>ResetProgram:</span> Resets or deletes various custom
data in the program. This does the following things: Resets all macro event
variables to 0 (making this a superset of the ClearEvents operation), enables
all commands and removes all triggers, deletes all custom texture bitmaps, initializes
internal variables used by the Turtle operation, and finally turns off
fAutorepeatLastCommand, fCreateMazesPolished, fShowDot2, fSky3D, fNoCompass,
fNoLocation, fNoSubmerge, fFogGround, fMarkColor, fMarkAll, fTextureDual, and
fTextureBlend. It also deactivates nStepHeight, nMessageTitle, kWall2, kSky2,
kGround2, k3DCeiling2, kMountain2, kCloud2, nSkyMark, nWallVariable, nFogLit, and
restores the Passage and Wall colors to black and white. This is useful to run
at the start of a script, to ensure program state that might have been set by
previously run scripts doesnt interfere.</p>

<p class=A><span class=N>ResetInside:</span> Randomly regenerates the positions
of stars, mountains, and clouds in the perspective inside view.</p>

<p class=A><span class=N>WindowTitle &lt;format&gt; &lt;flag&gt;:</span> Sets
the formatted string &lt;format&gt; to be the title of the Daedalus window. If
&lt;flag&gt; is true, the window title will have the default title Daedalus 3.3
prepended to it.</p>

<p class=A><span class=N>Beep:</span> Sounds a simple system beep.</p>

<p class=A><span class=N>Beep2 &lt;num1&gt; &lt;num2&gt;:</span> Like Beep
except sounds a tone of frequency &lt;num1&gt; for &lt;num2&gt; milliseconds.
The parameter &lt;num1&gt; can range from 37 to 32767. Note this operation uses
the PC speaker, and therefore will do nothing on certain operating systems,
such as 64 bit Windows XP and Vista.</p>

<p class=A><span class=N>Sound &lt;file&gt;:</span> Plays a Windows wave format
sound file (which usually has a .wav extension). The nSoundDelay variable
controls how sounds are played.</p>

<p class=A><span class=N>Delay &lt;num&gt;:</span> Pauses or sleeps the program
for at least &lt;num&gt; milliseconds. Does nothing if &lt;num&gt; is negative.
Useful to ensure animation happens at a certain minimum speed on fast
computers.</p>

<p class=A><span class=N>Set &lt;x&gt; &lt;y&gt; &lt;flag&gt;:</span> Set
pixel. Turns the pixel at the given coordinates in the main monochrome bitmap
on or off.</p>

<p class=A><span class=N>SetT &lt;x&gt; &lt;y&gt; &lt;flag&gt;:</span> Set
temporary pixel. Turns the pixel at the given coordinates in the temporary
monochrome bitmap on or off.</p>

<p class=A><span class=N>SetE &lt;x&gt; &lt;y&gt; &lt;flag&gt;:</span> Set
extra pixel. Turns the pixel at the given coordinates in the extra monochrome
bitmap on or off.</p>

<p class=A><span class=N>SetA &lt;num&gt; &lt;x&gt; &lt;y&gt; &lt;flag&gt;:</span>
Set custom pixel. Turns the pixel at the given coordinates in custom monochrome
bitmap &lt;num&gt; on or off.</p>

<p class=A><span class=N>SetC &lt;x&gt; &lt;y&gt; &lt;num&gt;:</span> Set color
pixel. Sets the color value of the pixel at the given coordinates on the color
bitmap to &lt;num&gt;.</p>

<p class=A><span class=N>SetCT &lt;x&gt; &lt;y&gt; &lt;num&gt;:</span> Set
temporary color pixel. Sets the color value of the pixel at the given
coordinates on the temporary color bitmap to &lt;num&gt;.</p>

<p class=A><span class=N>SetCE &lt;x&gt; &lt;y&gt; &lt;num&gt;:</span> Set
extra color pixel. Sets the color value of the pixel at the given coordinates
on the extra color bitmap to &lt;num&gt;.</p>

<p class=A><span class=N>SetCA &lt;num1&gt; &lt;x&gt; &lt;y&gt; &lt;num2&gt;:</span>
Set custom color pixel. Sets the color value of the pixel at the given
coordinates in custom color bitmap &lt;num1&gt; to &lt;num2&gt;.</p>

<p class=A><span class=N>SetX &lt;x&gt; &lt;y&gt; &lt;dir&gt; &lt;num&gt;:</span>
Set texture. Sets the texture on the block at the given coordinates facing the
given direction. This means setting the appropriate bits of a pixel on custom
color bitmap indicated by nTextureWall to &lt;num&gt;. If &lt;dir&gt; is -1,
all four sides are set to the texture number. If &lt;dir&gt; is -2, both side
pairs are set to the texture number, in a manner that assumes fTextureDual is
set.</p>

<p class=A><span class=N>Set3 &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;flag&gt;:</span>
Set 3D pixel. Turns the pixel at the given coordinates in the 3D bitmap within
the main bitmap on or off.</p>

<p class=A><span class=N>Set3T &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;flag&gt;:</span>
Set temporary 3D pixel. Turns the pixel at the given coordinates in the
temporary 3D bitmap on or off.</p>

<p class=A><span class=N>Set3E &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;flag&gt;:</span>
Set extra 3D pixel. Turns the pixel at the given coordinates in the extra 3D
bitmap on or off.</p>

<p class=A><span class=N>Set3A &lt;num&gt; &lt;x&gt; &lt;y&gt; &lt;z&gt;
&lt;flag&gt;:</span> Set custom 3D pixel. Turns the pixel at the given
coordinates in the 3D bitmap within custom monochrome bitmap &lt;num&gt; on or
off.</p>

<p class=A><span class=N>Set3C &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;num&gt;:</span>
Set 3D color pixel. Sets the color value of the pixel at the given coordinates
of the 3D bitmap within the color bitmap to &lt;num&gt;.</p>

<p class=A><span class=N>Set3CT &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;num&gt;:</span>
Set temporary 3D color pixel. Sets the color value of the pixel at the given
coordinates on the temporary 3D color bitmap to &lt;num&gt;.</p>

<p class=A><span class=N>Set3CE &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;num&gt;:</span>
Set extra 3D color pixel. Sets the color value of the pixel at the given
coordinates on the extra 3D color bitmap to &lt;num&gt;.</p>

<p class=A><span class=N>Set3CA &lt;num1&gt; &lt;x&gt; &lt;y&gt; &lt;z&gt;
&lt;num2&gt;:</span> Set custom 3D color pixel. Sets the color value of the
pixel at the given coordinates of the 3D bitmap within custom color bitmap
&lt;num1&gt; to &lt;num2&gt;.</p>

<p class=A><span class=N>Set3X &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;dir&gt;
&lt;num&gt;:</span> Set 3D texture. Sets the texture on the block at the given
coordinates facing the given direction. This means setting the appropriate bits
of a pixel on the 3D bitmap custom color bitmap indicated by nTextureWall to
&lt;num&gt;.</p>

<p class=A><span class=N>ZapTexture &lt;num&gt;:</span> This will find the
first set pixel along the direction the dot is facing, and set the texture on
the side of the block facing the dot to &lt;num&gt;. This is similar to the
commands on the Zap Dot submenu, and is like shooting a paintball at a wall to
change its texture. </p>

<p class=A><span class=N>MarkX2:</span> Like the Mark 'X' At Dot command but
affects ceiling markings instead of floor markings. This will set nSkyMark to a
new custom bitmap if not already set.</p>

<p class=A><span class=N>EraseX2:</span> Like the Erase 'X' At Dot command but
affects ceiling markings instead of floor markings.</p>

<p class=A><span class=N>Turtle &lt;string&gt;:</span> Draws a sequence of
lines in the main bitmap. The &lt;string&gt; contains a sequence of subactions
indicating what to draw next. Most actions consist of a letter followed by a
number (no whitespace between or within actions) and draw a line starting from
the current pen position, as stored in the nXTurtle and nYTurtle variables, and
automatically update the pen position variables to the new end position. Like
the draw command in BASIC.</p>

<p class=B><span class=P>U&lt;num&gt;, D&lt;num&gt;, L&lt;num&gt;,
R&lt;num&gt;:</span> Draws from the current position up, down, left, or right
that many pixels.</p>

<p class=B><span class=P>E&lt;num&gt;, F&lt;num&gt;, G&lt;num&gt;,
H&lt;num&gt;:</span> Draws from the current position northeast, southeast,
southwest, and northwest that many pixels.</p>

<p class=B><span class=P>M&lt;num&gt;,&lt;num&gt;:</span> Move. Draws to the
specified coordinates, regardless of the current position. If either of these
numbers has a + or - sign, that coordinate will be relative to the current
position. For example M10,20 draws to pixel coordinate (10, 20) while M-10,+20
draws down and to the left that many pixels from the current position.</p>

<p class=B><span class=P>B&lt;action&gt;:</span> Blank. Causes the next action
to just update the pen position, and not do any drawing.</p>

<p class=B><span class=P>N&lt;action&gt;:</span> No update. Causes the next
action to not update the pen position.</p>

<p class=B><span class=P>C&lt;flag&gt;:</span> Color. Sets the color of the
lines to draw. C1 means to draw white, and C0 means black.</p>

<p class=B><span class=P>S&lt;num&gt;:</span> Scale. Sets the scale for all
relative motion, i.e. how many pixels each unit should cover. For example S2
means a future action like R10 will draw right 20 instead of just 10 pixels.</p>

<p class=B><span class=P>A&lt;num&gt;:</span> Angle. Sets a rotation to apply
to all relative motion. A0 is normal, A1 rotates everything to the right 90
degrees, A2 rotates 180 degrees, and A3 rotates everything left 90 degrees.
For example A1 means a future action like R10 will draw down 10 units
instead of right.</p>

<p class=B><span class=P>O&lt;char&gt;&lt;num&gt;, O&lt;flag&gt;:</span> Arc.
Draws an arc or 1/4 of a circle of radius &lt;num&gt;. The &lt;char&gt; ranges
from A to H and indicates the direction the arc is drawn from the current
position. OA arcs up then to the right, OB arcs right then up (both end up
in the same place as the E action). OC arcs right then down, OD arcs down
then right (both end in same place as F). OE arcs down then left, OF arcs
left then down (both end in same place as G). OG arcs left then up, OH
arcs up then left (both end in same place as H). If O is immediately
followed by a number it sets the type of arc to draw. O1 means to draw a
curve, and O0 means to draw a right angle.</p>

<p class=B><span class=P>T&lt;char&gt;&lt;string&gt;&lt;char&gt;,
T&lt;flag&gt;:</span> Text. Draws text, where the text to print is bracketed
between two instances of the character &lt;char&gt;. For example T_HI_ prints
HI. If &lt;char&gt; is T, there is no end &lt;char&gt;, where text drawing
will continue to end of the entire macro string (useful if &lt;string&gt; may
contain any characters). If T is immediately followed by a number it sets the
font to use when printing. T0 means to use a simple font where characters are
5 pixels high and variable width, T1 means a fixed width font where all
characters fit within a 5x9 pixel box, and T2 means a fixed width 8x13 pixel
font where the characters are formed by a single unicursal line that never
overlaps itself (used by the Word Mazes script to create Mazes with the
solution path spelling a word). The T1 font supports characters in the high-Ascii
128-255 range. Its glyphs cover the common Windows-1252 codepage, which is a
superset of ISO 8859-1 (Latin 1) but with extra characters defined for the
128-159 range.</p>

<p class=B><span class=P>`: </span>Fill. Runs the Fill At Dot command at the
pen position.</p>

<p class=B><span class=P>~: </span>Flood. Runs the Flood At Dot command at the
pen position.</p>

<p class=B><span class=P>_:</span> Reset. Changes all internal turtle variables
to their defaults, specifically the current coordinates, color, scale, angle,
arc type, and font. Useful for initializing to a consistent state and avoiding
side effects of previous usages of the operation.</p>

<p class=A><span class=N>TextDraw &lt;string&gt; &lt;x&gt; &lt;y&gt;:</span>
Draws a string of text on the main monochrome bitmap. The coordinates specify
the upper left corner of the texts bounding box. The font used is specified by
the TextFont operation.</p>

<p class=A><span class=N>TextFont &lt;font&gt; &lt;size&gt; &lt;weight&gt;:</span>
Specifies the font to use in the TextDraw operation, along with its size and
weight. The size indicates the height in pixels, and the weight is the
boldness, in which 0 is default, 400 is normal, and higher numbers like 700 are
bold. Unlike the text abilities in the Turtle operation, this allows access to
installed system fonts.</p>

<p class=A><span class=N>Perimeter:</span> Counts the perimeter of an area of
on pixels in the monochrome bitmap, displaying the total length in pixels, the
number of sides, and the average side length. The total length will also be
returned in @z. The shape measured will be that under the dot, or the first shape
from the top of the bitmap if the dot isnt over an on pixel. If No Corner
Hopping is off, pixels connected only by corners will be considered the same
shape, where counting will include both.</p>

<p class=A><span class=N>Thicken2 &lt;pixels&gt;:</span> Like the Thicken
command except thickens each on pixel in the main monochrome bitmap by the
specified number of pixels. If No Corner Hopping in Dot Settings is off, then
each pixel will become a &lt;pixels&gt; by &lt;pixels&gt; square instead of a
circle of &lt;pixels&gt; diameter.</p>

<p class=A><span class=N>Convex:</span> Looks at the on pixels within the main
bitmap, and fills in all concave inlets, holes, and areas between disconnected
sections within it. In other words, this does the same as wrapping a rubber
band around the set of on pixels, and filling in everything inside the band,
leaving a convex shape.</p>

<p class=A><span class=N>AllMoire:</span> Creates a moire pattern in the main
bitmap, composed of lines radiating from the center of the bitmap to the edges.</p>

<p class=A><span class=N>2ndLineUntil &lt;flag&gt;:</span> Draws a line on the
main monochrome bitmap from the dot to the 2nd dot, in the Drag Is Erase color
from Dot Settings. If the line bumps into an existing pixel of the color of the
line, drawing stops. Afterward @x and @y will contain the coordinates of the
pixel that was hit (if &lt;flag&gt; is True), or the coordinates of the pixel
immediately before the location hit (if &lt;flag&gt; is False). Either way, @z
will contain whether the line drawing hit an on pixel and stopped prematurely.
This is used by the Mouse Maze script to draw lines that stop if you run into
a wall.</p>

<p class=A><span class=N>2ndPutStretch &lt;x1&gt; &lt;y1&gt; &lt;x2&gt;
&lt;y2&gt;:</span> Fills the color bitmap with the contents of an arbitrary
shaped quadrilateral within the temporary color bitmap, stretched to the bounds
of the color bitmap. The upper left corner is defined by the dot, the lower
right by the 2nd dot, upper right by &lt;x1&gt;, &lt;y1&gt;, and lower left by
&lt;x2&gt;, &lt;y2&gt;. This can be used to help create a straight down aerial
view of a life size Maze from a photo taken at an oblique angle.</p>

<p class=A><span class=N>NoIsland &lt;x&gt; &lt;y&gt;:</span> Draws a line of
on pixels connecting two detached islands of on pixels with each other. This
starts with the island under &lt;x&gt;, &lt;y&gt;, where if theres no island
there, starts with the first island from the top of the bitmap. Once the start
island is determined, the shortest line possible is drawn to the next nearest
island. Normally this always connects islands with the same shortest path,
however if Find A Path Finds Random Path is set, this will randomly pick among
the set of shortest paths. Afterward @z is the length of the line, or 0 if
there were no separate islands to connect.</p>

<p class=A><span class=N>NoIslands:</span> Like NoIsland except it runs
multiple times until all islands are connected. Afterward @z is the number of
times islands were connected, i.e. one less than the total number of islands on
the original bitmap. This is used by the Word Mazes script when making Mazes
in the shape of words, to connect all the letters.</p>

<p class=A><span class=N>4D3D &lt;color1&gt; &lt;color2&gt; &lt;color3&gt;:</span>
Converts a 4D Maze to a 3D Maze. A list of 3D Mazes will be placed along the
X-axis in the main and color bitmaps, where the 4th dimension will be
represented by colored portals between these 3D Mazes. The portals will appear
as semitransparent sections in the perspective inside view, where the
semitransparent pixels get defined in the extra monochrome bitmap. In the color
bitmap, walls will be in the inside 3D Wall color, and passages will be in the
inside Wall color. Portals back along the 4th dimension will have color
&lt;color1&gt;, portals forward along the 4th dimension will have color
&lt;color2&gt;, and places where there are portals both back and forward at the
same spot will have color &lt;color3&gt;. This is used by the 4D Mazes script
to convert the 4D Maze into a form that can be navigated in perspective inside
view.</p>

<p class=A><span class=N>ND:</span> Creates a perfect N-Dimensional Maze in the
main bitmap, represented as a multidimensional grid of 2D levels. The size of
the Maze to create is specified in the Size or Maze Size dialogs, where the 3D
X and Y fields are the number of pixels along the 1st and 2nd dimensions, Z is
the pixels along the 3rd and higher dimensions, and W is the number of dimensions.
The various ND Maze operations are used by the 5D Mazes script.</p>

<p class=A><span class=N>DeadEndND:</span> Solves an N-Dimensional Maze, by
filling in all dead ends. The dimensions of the Maze are defined by the Size
dialogs.</p>

<p class=A><span class=N>DrawND &lt;x&gt; &lt;y&gt; &lt;num1&gt; &lt;num2&gt;
&lt;color&gt;:</span> Draws an N-Dimensional Maze in the active bitmap. The
Maze is drawn centered around coordinates &lt;x&gt;, &lt;y&gt;. A set of N
custom variables starting with slot &lt;num1&gt; indicate ones current
location within the Maze to later highlight. N pairs of custom variables
starting with slot &lt;num2&gt; indicate the horizontal and vertical offsets to
give to each dimensions axis. Afterward the dot will be set to the coordinates
in the bitmap where the current location in the ND Maze mapped to, and the 2nd
dot will be set to the coordinates of the far corner i.e. the exit.</p>

<p class=B>When an N-Dimensional Maze is drawn on the main monochrome bitmap,
if &lt;color&gt; is non-black, the Maze will be drawn in the Wall color,
otherwise it will be in the passage color. When drawn on the color bitmap, each
axis has passage edges drawn in a different color of the rainbow as defined in
the Replace Color dialog, which makes it easier to distinguish the different
dimensions. If the Drag Move Dot setting is on, coloring will instead highlight
edges based on their distance from ones location within the Maze, with nearer
locations in earlier colors of the rainbow. If the Drag Bit Dot setting is on,
vertexes will be highlighted by 3x3 pixel spots in &lt;color&gt;, which makes
them easier to see.</p>

<p class=A><span class=N>MoveND &lt;num1&gt; &lt;num2&gt; &lt;x&gt; &lt;y&gt;:</span>
Moves an N-Dimensional point to an adjacent cell in a ND Maze. A set of N
custom variables starting with slot &lt;num1&gt; indicate ones current
location within the Maze, and N pairs of custom variables starting with slot
&lt;num2&gt; indicate the horizontal and vertical screen offsets each dimensions
axis has. The ND point at &lt;num1&gt; will be moved down an available passage
to the cell that maps nearest to screen coordinates &lt;x&gt;, &lt;y&gt; (doing
nothing if the closest ND cell is the current point). Afterward the dot is
updated to the coordinates where the current (possibly changed) location in the
ND Maze mapped to, and @z is set to whether the ND dot has moved to the far
corner i.e. the exit.</p>

<p class=A><span class=N>FractalPart &lt;x&gt; &lt;y&gt; &lt;w&gt; &lt;num&gt;:</span>
Like the Fractal Maze creation command, however this creates just a subsection
of the fractal Maze instead of the whole thing, allowing viewing of Mazes too
large to fit in a bitmap. This creates the section at coordinates &lt;x&gt;,
&lt;y&gt; at depth &lt;w&gt;, with the fractal Maze itself defined by random
number seed &lt;num&gt;. This actually creates a 4x4 grid of sections
surrounding the coordinates. Afterward @x will be set to the horizontal cell
location of the entrance, and @y the horizontal location of the exit. This is
used by the Worlds Largest Maze script to create the section of the giant
virtual Maze nearest your location.</p>

<p class=A><span class=N>FractalPart3 &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;w&gt;
&lt;num&gt;:</span> Like the Fractal Maze creation command for 3D Mazes,
however this creates just a subsection of the 3D fractal Maze instead of the
whole thing, allowing viewing of Mazes too large to fit in a bitmap. This
creates the section at coordinates &lt;x&gt;, &lt;y&gt;, &lt;z&gt; at depth
&lt;w&gt;, with the fractal Maze itself defined by random number seed
&lt;num&gt;. This actually creates a 2x2x2 grid of sections surrounding the
coordinates. Afterward @x will be set to the horizontal cell location of the
entrance, and @y the horizontal location of the exit. This is used by the
Worlds Largest Maze script to create the section of the giant 3D virtual
Maze nearest your location.</p>

<p class=A><span class=N>VirtualPerfect &lt;edges&gt;:</span> Creates or adds
on to part of a Maze in memory using the hunt and kill algorithm, in which only
part of the Maze is stored in the main bitmap. The dot indicates the current
coordinates, and will be updated upon return. The &lt;edges&gt; parameter is a
group of flags indicating which edges the current section being worked upon is
adjacent to, in which 1 means top, 2 means left, 3 bottom, and 4 right. This
operation will create the Maze until one of the edges is reached. Afterward @z
will contain how many cells were created. This operation can be used to compose
a Maze larger than will fit in memory at once, by creating one section at a
time, although its the responsibility of the caller to save created sections
to disk and load other sections appropriately for the next phase of creation.</p>

<p class=A><span class=N>VirtualAldous &lt;edges&gt;:</span> Like
VirtualPerfect except creates or adds on to part of a Maze using the Aldous
Broder algorithm.</p>

<p class=A><span class=N>VirtualRecurs &lt;edges&gt; &lt;stack&gt;:</span> Like
VirtualPerfect except creates or adds on to part of a Maze using the recursive
backtracking algorithm. The stack used by this algorithm is stored in the
temporary bitmap, which should be n by 1 pixels, where n is two times the
number of entries in the stack. (Because the stack stores directions, two bits
are needed to represent four possible numbers.) The &lt;stack&gt; parameter
indicates the initial stack offset in the temporary bitmap. This operation will
create the Maze until one of the edges is reached, or one of the ends of the
stack is reached. Afterward @y will contain the new stack offset. The Virtual
Mazes script that comes with the program uses this operation to create large
recursive backtracking Mazes in a grid of bitmaps (along with using other
bitmaps temporarily for the stack). This script doesnt have its own menu option,
but it is available in the sources subdirectory of the installation.</p>

<p class=A><span class=N>DrawLevel &lt;z&gt; &lt;x&gt; &lt;y&gt; &lt;xx&gt;
&lt;xy&gt; &lt;yx&gt; &lt;yy&gt;:</span> Treats level &lt;z&gt; in the 3D
bitmap in the temporary bitmap as an orthogonal Maze and draws it at
coordinates &lt;x&gt;, &lt;y&gt; on the main bitmap. Walls are always one pixel
thick, however passages can be of greater sizes and displayed in different
orientations. The offset for each horizontal cell is in &lt;xx&gt; and
&lt;xy&gt; (normally zero), and the offset for each vertical cell is in
&lt;yx&gt; (normally zero) and &lt;yy&gt;. This is used by the Demos script
to display Mazes on the surface of a cube.</p>

<p class=A><span class=N>CustomIterate:</span> Changes the Custom Paths field
in the Labyrinth Settings dialog to the next valid Labyrinth. This does the
same as creating a Custom Labyrinth with the Custom Autoiterate flag set,
except this doesnt draw the new Labyrinth. Afterward @z will contain whether
incrementing failed because Dont Autostart Infinite was on and there were no
more Labyrinths to create of the current size.</p>

<p class=A><span class=N>Dungeon &lt;num1&gt; &lt;num2&gt; &lt;num3&gt; &lt;num4&gt;
&lt;num5&gt;:</span> Draws a dungeon style Maze in the main bitmap formed of
random rooms and connecting passages, similar to dungeon levels seen in the
computer games Rogue and Nethack.</p>

<p class=B><span class=P>&lt;num1&gt;:</span> The number of rooms to create.
Note there may be fewer rooms actually created if a place for the last rooms
cant be found. If &lt;num1&gt; is 1 the whole bitmap will be filled with one
big room, while if &lt;num1&gt; is 0 the whole bitmap will be filled with a
Maze.</p>

<p class=B><span class=P>&lt;num2&gt;:</span> The number of connecting passages
between rooms (beyond the minimum number required to ensure all the rooms are
connected with each other).</p>

<p class=B><span class=P>&lt;num3&gt;:</span> The maximum horizontal and
vertical pixel size of each room, where a 3x3 room is the minimum.</p>

<p class=B><span class=P>&lt;num4&gt;:</span> The percentage of places where
passages connect with rooms, that should contain closed doors (as opposed to
doorless openings).</p>

<p class=B><span class=P>&lt;num5&gt;:</span> Whether the dungeon should be
marked with an entrance and exit. If the 10s place is non-zero, there will be
a passage from the top edge of the bitmap to a room, otherwise the entrance will
be a hole in the ceiling somewhere in a random room. The position of the dot
will be moved to this entrance. If the 1s place is non-zero, there will not be
an exit to the dungeon, otherwise there will be an exit hole in the floor
somewhere in the middle of a random room.</p>

<p class=B>If Bitmap Is 3D is on, the dungeon will be made within a level,
otherwise pits in the floor and ceiling wont be created since its a 2D
bitmap. If the color bitmap exists, it will be made into a copy of the dungeon
with the following coloring: Walls = light gray, Passages = dark gray, Rooms =
gray, Walls of rooms = red, Doors = green, Ceiling and floor pits = black. If
the temporary bitmap exists, it will have on pixels where doors are. This is
used by the Dragonslayer Game script to create its dungeon levels.</p>

<p class=A><span class=N>ZoomSprite:</span> This replaces the active bitmap
with a zoomed version of itself. Each pixel is replaced with a square section
from the temporary bitmap. The status of a pixel in the monochrome bitmap and
its four neighbors determines which section of the temporary bitmap is used for
the zoomed pixel at that coordinate. The width of the temporary bitmap divided
by four determines the zoom factor and the size of each section. On pixels use
the first four rows of the temporary bitmap, where the 16 combinations of the
status of their four neighbors as shown below determines which section gets
used. If theres not enough rows in the temporary bitmap, combinations out of
bounds are solid on or white pixels. Off pixels are replaced with solid off or
black pixels, unless rows 5 through 8 in the temporary bitmap are present, in
which case those rows are used instead.</p>

<p class=Fixed> <span style='background:silver'>#</span>   <span
style='background:silver'>.</span>   <span style='background:silver'>.</span>  
<span style='background:silver'>.</span></p>

<p class=Fixed><span style='background:silver'>.#.</span> <span
style='background:silver'>##.</span> <span style='background:silver'>.#.</span>
<span style='background:silver'>.##</span></p>

<p class=Fixed> <span style='background:silver'>.</span>   <span
style='background:silver'>.</span>   <span style='background:silver'>#</span>  
<span style='background:silver'>.</span></p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed> <span style='background:silver'>#</span>   <span
style='background:silver'>.</span>   <span style='background:silver'>.</span>  
<span style='background:silver'>#</span></p>

<p class=Fixed><span style='background:silver'>##.</span> <span
style='background:silver'>##.</span> <span style='background:silver'>.##</span>
<span style='background:silver'>.##</span></p>

<p class=Fixed> <span style='background:silver'>.</span>   <span
style='background:silver'>#</span>   <span style='background:silver'>#</span>  
<span style='background:silver'>.</span></p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed> <span style='background:silver'>#</span>   <span
style='background:silver'>#</span>   <span style='background:silver'>.</span>  
<span style='background:silver'>#</span></p>

<p class=Fixed><span style='background:silver'>###</span> <span
style='background:silver'>##.</span> <span style='background:silver'>###</span>
<span style='background:silver'>.##</span></p>

<p class=Fixed> <span style='background:silver'>.</span>   <span
style='background:silver'>#</span>   <span style='background:silver'>#</span>  
<span style='background:silver'>#</span></p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed> <span style='background:silver'>#</span>   <span
style='background:silver'>.</span>   <span style='background:silver'>#</span>  
<span style='background:silver'>.</span></p>

<p class=Fixed><span style='background:silver'>.#.</span> <span
style='background:silver'>###</span> <span style='background:silver'>###</span>
<span style='background:silver'>.#.</span></p>

<p class=Fixed> <span style='background:silver'>#</span>   <span
style='background:silver'>.</span>   <span style='background:silver'>#</span>  
<span style='background:silver'>.</span></p>

<p class=Fixed>&nbsp;</p>

<p class=A><span class=N>DrawSeen &lt;num&gt;:</span> This highlights pixels on
the color bitmap that are visible from the dot. Pixels within a distance of
&lt;num&gt; pixels along a line of sight from the dot, that arent blocked by
on pixels in the monochrome bitmap, will be set to the corresponding pixel in
the temporary color bitmap. If &lt;num&gt; is negative, pixels within a
circular region will be uncovered, otherwise pixels within a square region will
be. If No Corner Hopping is off, this allows one to see between on pixels
connected diagonally.</p>

<p class=A><span class=N>Palette:</span> Replaces colors in the main bitmap
based on the temporary bitmap. For each color in the main bitmap, treat it as a
24 bit number index into the temporary bitmap. If a color index is too large to
fit within the bounds of the temporary bitmap, or that temporary bitmap pixel
is 0, then do nothing, otherwise replace the original color with the color at
that index.</p>

<p class=A><span class=N>SymmetricX:</span> Like the Make Symmetric command
except modifies the current Maze to be horizontally symmetric, reflected across
the up down axis. Note reflected Mazes are hard to have perfect, where either
the entire reflection axis will be one long passage, there will be at least one
asymmetry, or a combination of both.</p>

<p class=A><span class=N>SymmetricY:</span> Like the Make Symmetric command
except modifies the current Maze to be vertically symmetric, reflected across
the left right axis.</p>

<p class=A><span class=N>SymmetricZ:</span> Like the Make Symmetric command
except modifies the current Maze to be symmetric around the center, with one
quadrant duplicated and rotated four times. Note this Maze can only be
symmetric when it has an odd number of passages, in which case the solution
path must pass through the center cell. Mazes with an even number of passages
will have a single asymmetry in them.</p>

<p class=A><span class=N>Overview2:</span> This is like the Overview command,
except it draws an orthographic overview such that each block is seen edge on
(instead of face on). The top of each block will be diamond shaped, with the
scene being not unlike the layout in real time strategy games such as StarCraft
or Age of Empires. As with Overview, the Depth Size draw setting indicates the
height of each block. The Vertical Size here indicates the pixel height of each
edge of the diamond, and Horizontal Size indicates how many pixels wide each
step along those edges are. With Depth Size set to 10, good values for
Horizontal and Vertical Height are 2 and 3.</p>

<p class=A><span class=N>Altitude &lt;num1&gt; &lt;num2&gt;:</span> Creates a
display similar to the Render Bitmap Overview command when applied to a 2D
bitmap, however here each block has its own height, forming a 3D bar graph or a
bar graph over a 2D array. The height values come from the color bitmap. If the
color bitmap is active, the display will be drawn in the color bitmap
(replacing the height values input source) and the color of each block will be
taken from the temporary color bitmap. Each height is scaled by &lt;num1&gt;,
where 1000 means one unit in the color bitmap maps to one pixel in the display.
The max value allowed for a color bitmap pixel is in &lt;num2&gt;, where numbers
higher are capped to this height. If the scale factor &lt;num1&gt; is negative,
then the scale used will be such that the tallest block drawn will be exactly
&lt;num2&gt; pixels high. This is used by the Mandelbrot Set Fractal script
to draw 3D overviews of the fractal.</p>

<p class=A><span class=N>GetWireframe &lt;num&gt; &lt;var&gt;:</span> Fetches
line number &lt;num&gt; from the wireframe scene in memory and stores it in 7
custom variables starting with index &lt;var&gt;. For example, GetWireframe 0
10 will store the X, Y, and Z coordinates of the two endpoints of the first line
in custom variables #10 through #15, and its color in variable #16.</p>

<p class=A><span class=N>SetWireframe &lt;num&gt; &lt;var&gt;:</span> Defines
line number &lt;num&gt; in the wireframe scene in memory with the 7 custom
variables starting with index &lt;var&gt;. For example, SetWireframe 0 10
will set the X, Y, and Z coordinates of the two endpoints of the first line
with custom variables #10 through #15, and set color from variable #16. This
does nothing if &lt;num&gt; is outside the limit of the number of lines in the
wireframe, so set nWireframeSize if you want to change the number of lines in
memory.</p>

<p class=A><span class=N>GetPatch &lt;num&gt; &lt;var&gt;:</span> Fetches patch
number &lt;num&gt; from the patch scene in memory and stores it in 19 custom
variables starting with index &lt;var&gt;. The first 16 variables store the
four vertexes of the patch, in X, Y, and Z coordinates, and then whether the
edge connected with the point is highlighted. The 17th variable stores the
number of vertexes used in the patch (which is always either 3 or 4), the 18th
stores the color, and the 19th the patchs transparency.</p>

<p class=A><span class=N>SetPatch &lt;num&gt; &lt;var&gt;:</span> Defines patch
number &lt;num&gt; in the patch scene in memory with the 19 custom variables
starting with index &lt;var&gt;. The 19 custom variables define the three or
four vertexes, the number of vertexes in use, the color, and transparency, in
the same layout as GetPatch. This does nothing if &lt;num&gt; is outside the
limit of the number of patches in the scene, so set nPatchSize if you want to
change the number of patches in memory.</p>

<p class=A><span class=N>Stereogram &lt;num1&gt; &lt;num2&gt;:</span> Creates a
random dot stereogram in the active bitmap, where the patterns in the
stereogram will horizontally repeat after &lt;num1&gt; pixels. The stereogram
is made from the contents of the main bitmap, where on pixels in it will appear
to have a depth or farness of &lt;num2&gt; when compared to off pixels. Typical
values for &lt;num1&gt; and &lt;num2&gt; are 50 and 10. Normally the dots
placed are random, where stereograms on the color bitmap take their colors from
the blend range defined in the Replace Color dialog. If the temporary bitmap is
set and the same size as the main bitmap, then the pattern will be taken from
the corresponding pixels on the temporary bitmap.</p>

<p class=A><span class=N>SetLife &lt;string&gt;:</span> Defines the behavior of
the Life Generate command. The &lt;string&gt; must be two strings of digits
ranging from 0-8 separated by a slash. The first sequence indicates neighbor
counts which keep a cell alive, and the second neighbor counts which cause a
new cell to be born. The default for Conways Life is 23/3 which indicates
cells live if they have 2 or 3 neighbors, and cells are born if they have 3
neighbors. Interesting values for &lt;string&gt; related to Mazes are 12345/3
(called Maze) and 1234/3 (called Mazectric), which produce Mazelike
patterns filled with one pixel wide passages and walls, and the occasional
room.</p>

<p class=A><span class=N>Evolution &lt;num&gt; &lt;flag&gt;:</span> Creates a
type of cyclic cellular automaton in the color bitmap. The pattern will have
&lt;num&gt; different colors, where the colors fade through the blend range
defined in the Replace Color dialog. If &lt;flag&gt; is false, a new pattern
will be initialized with all colors set randomly, else the existing pattern
will evolve a step. Each color flows into its orthogonal neighbor, if those
neighbors are one color less than it. If Edge Behavior is set to Torus
Wrapping, the colors can flow around the edges of the bitmap. If No Corner
Hopping is off, flowing will happen in all eight directions instead of just the
four compass directions. Note the temporary color bitmap is used to store the
color indexes of each pixel. This is used by the Demos script.</p>

<p class=A><span class=N>Mandelbrot &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt;
&lt;num&gt;:</span> Draws a Mandelbrot set fractal in the color bitmap. The
coordinate pairs define the rectangle of the Mandelbrot set to map to the
bounds of the color bitmap, where the numbers are divided by a billion, e.g.
1500000000 means 1.5. The depth or number of iterations to do before
considering a pixel infinite depth and making it black is &lt;num&gt;. Colors
for depths come from the blend defined in the Replace Color dialog. This forms
the basis of the Mandelbrot Set Fractal script.</p>

<p class=A><span class=N>MandelbrotGet:</span> This operation sets @x and @y to
the coordinates of a random color pixel in the color bitmap thats adjacent to
a black pixel. Returns the center if there are no such pixels. Priority will be
given to color pixels adjacent to a low number of black pixels. This is used by
the Mandelbrot Set Fractal script to find an interesting spot when zooming in
randomly.</p>

<p class=A><span class=N>Contrast:</span> Sets the active bitmap to highlight
contrast or differences between pixels. Each pixel is set to the maximum
difference between it and all neighboring pixels. If No Corner Hopping is set,
this considers the four orthogonal neighboring pixels, otherwise this considers
all eight neighboring pixels including diagonals. The edge of the bitmap is
considered to be next to off or black pixels. For the monochrome bitmap this
sets a pixel if any of its neighbors have a different value than it, while for
the color bitmap this compares the three RGB channels separately. This
operation can be used to detect and highlight sharp edges in a picture, which can
convert an imported Maze image into something that Daedalus can solve.</p>

<p class=A><span class=N>Hunger &lt;num&gt;:</span> Implements the computer AI
in the Hunger Games script, and isnt useful outside of it. The low 12 bits
of &lt;num&gt; indicates the tribute to determine the best move for, normally ranging
from 0-23. If the high 12 bits of &lt;num&gt; are set, they indicate the light
radius in squares normal tributes should be able to see at that time of day. Afterward
custom variable @z will indicate the action to take, @y will indicate the inventory
slot item to operate upon (if applicable), and @x will indicate the direction
to move or throw an item in (if applicable). The values for @z are as follows.
0: Do nothing and wait, 1: Use item, 2: Pick up whatever standing over, 3: Move
or melee attack in direction, 4: Throw item in direction, 5: Drop item, 6:
Climb down, 7: Climb up, 8: Give item, 9: Dig down, 10: Fire launcher, 11: Free
tribute from Net, 12: Propose alliance, 13: Claim leadership.</p>

<p class=A><span class=N>System &lt;num&gt;:</span> Runs system menu commands.
If &lt;num&gt; is negative, minimizes the window. If positive, maximizes the
window. If 0, restores the window from being minimized or maximized.</p>

<p class=A><span class=N>Setup:</span> Sets up the program in the Windows
environment. This is a shortcut for a combination of the Program Group (User),
Desktop Icon, and File Extensions commands.</p>

<p class=A><span class=N>FileClose &lt;num&gt;:</span> Closes the file handle
in &lt;num&gt;. The file should have been opened with the FileOpen function.</p>

<p class=A><span class=N>FileWrite &lt;num&gt; &lt;var&gt;:</span> Writes
variable &lt;var&gt; to the file in handle &lt;num&gt;. If &lt;var&gt; is a
number its written as decimal text, else if &lt;var&gt; is a string its written
as a formatted string.</p>

<p class=A><span class=N>FileWriteByte &lt;num1&gt; &lt;num2&gt;:</span> Writes
byte &lt;num2&gt; to the file in handle &lt;num1&gt;.</p>

<p class=A><span class=N>FileReadStr &lt;num&gt; &lt;var&gt;:</span> Reads the
next string from the file in handle &lt;num&gt; and stores it in custom string
indicated by &lt;var&gt;.</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=variable>VARIABLES</a></p>

</div>

<p class=A>All dialog fields that are persistent, meaning if theyre changed
theyll still contain the entered value next time the dialog is brought up,
have a corresponding scripting variable. There are also some hidden variables
that are only accessible using scripting. Variable names are basically the name
of the field in the dialog (with spaces and other special characters removed).
There are a few exceptions, where common variables like the location of the dot
have shorter names for convenience, while some names need text added to make
them unique. Radio button groups are given the name of their group box, and are
implemented by a numeric variable, where 0 is the first choice, 1 the second,
etc. Each variable has a prefix character indicating its type. n means a
standard number, f means a number storing a boolean flag, r means a number
storing a floating point real number, k means a number storing a color, and s
means a string.</p>

<p class=Section2>********************  File Settings dialog 
********************</p>

<p class=Fixed>nCurrentGeneration</p>

<p class=Fixed>nGenerationCutoff</p>

<p class=Fixed>nNewFileCutoff</p>

<p class=Fixed>fUseEllersAlgorithm</p>

<p class=Fixed>fSaveInfiniteToFile</p>

<p class=Fixed>fSaveInfiniteAsDOSText</p>

<p class=Fixed>fDontAutostartInfinite</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>n2DBitmapXCutoff</p>

<p class=Fixed>n2DBitmapYCutoff</p>

<p class=Fixed>n3DBitmapXCutoff</p>

<p class=Fixed>fSaveTextBitmapsClipped</p>

<p class=Fixed>fLineCharsInTextBitmaps</p>

<p class=Fixed>fSaveTextBitmapsTabbed</p>

<p class=Section2>********************  Macro Events dialog 
********************</p>

<p class=Fixed>nOnMoveOffBitmap</p>

<p class=Fixed>nOnMoveIntoWall</p>

<p class=Fixed>nOnMoveToNewCell</p>

<p class=Fixed>nAfterMoveToNewCell</p>

<p class=Fixed>nOnFollowToNewCell</p>

<p class=Fixed>nAfterRedrawInside</p>

<p class=Fixed>nOnRedrawInside</p>

<p class=Fixed>nOnRunCommand</p>

<p class=Fixed>nOnLeftClick</p>

<p class=Fixed>nOnRightClick</p>

<p class=Fixed>nOnMiddleClick</p>

<p class=Fixed>nOnPrevClick</p>

<p class=Fixed>nOnNextClick</p>

<p class=Fixed>nOnMouseMove</p>

<p class=Fixed>nOnProgramExit</p>

<p class=Section2>********************  Display Settings dialog 
********************</p>

<p class=Fixed>nWhatToDraw</p>

<p class=Fixed>nHowToDrawIt</p>

<p class=Fixed>nHorizontalPixelValue</p>

<p class=Fixed>nVerticalPixelValue</p>

<p class=Fixed>fShowColorBitmap</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>nWindowHorizontalSize</p>

<p class=Fixed>nWindowVerticalSize</p>

<p class=Fixed>nWindowHorizontalOffset</p>

<p class=Fixed>nWindowVerticalOffset</p>

<p class=Fixed>nHorizontalScroll</p>

<p class=Fixed>nVerticalScroll</p>

<p class=Fixed>fSizeIsDrawableArea</p>

<p class=Fixed>fWindowAlwaysOnTop</p>

<p class=Fixed>fHideMenu</p>

<p class=Fixed>fHideScrollBars</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>fRedrawWhenBitmapEdited</p>

<p class=Fixed>nDisplayDelay</p>

<p class=Fixed>fAllowPartialScreenUpdates</p>

<p class=Fixed>fShowIndividualPixelEdits</p>

<p class=Fixed>fErrorCheckPixelOperations</p>

<p class=Fixed>fHourglassCursorOnRedraw</p>

<p class=Fixed>fAutorepeatLastCommand</p>

<p class=Fixed>nRepeatDelayInMsec</p>

<p class=Fixed>fPauseTimer</p>

<p class=Fixed>fSkipMessageDisplay</p>

<p class=Fixed>fAllowSoundPlaying</p>

<p class=Section2>********************  Set Colors dialog  ********************</p>

<p class=Fixed>kBorder</p>

<p class=Fixed>kPassage</p>

<p class=Fixed>kWall</p>

<p class=Fixed>kDot</p>

<p class=Fixed>kInsideWall</p>

<p class=Fixed>kSky</p>

<p class=Fixed>kGround</p>

<p class=Fixed>kLine</p>

<p class=Fixed>k3DWall</p>

<p class=Fixed>k3DCeiling</p>

<p class=Fixed>kMountain</p>

<p class=Fixed>kCloud</p>

<p class=Fixed>kFog</p>

<p class=Fixed>fAutorepeatRandomizesWallColor</p>

<p class=Section2>********************  Random Settings dialog 
********************</p>

<p class=Fixed>nRandomSeed</p>

<p class=Fixed>nRandomBias</p>

<p class=Fixed>nRandomRun</p>

<p class=Section2>********************  Dot Settings dialog 
********************</p>

<p class=Fixed>nX</p>

<p class=Fixed>nY</p>

<p class=Fixed>nZ</p>

<p class=Fixed>nDir</p>

<p class=Fixed>nX2</p>

<p class=Fixed>nY2</p>

<p class=Fixed>nZ2</p>

<p class=Fixed>nDir2</p>

<p class=Fixed>f3D</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>fShowDot</p>

<p class=Fixed>fDotIsCircle</p>

<p class=Fixed>fDotShowsArrow</p>

<p class=Fixed>nDotSize</p>

<p class=Fixed>fWallsImpassable</p>

<p class=Fixed>fNoCornerHopping</p>

<p class=Fixed>fGlancingBlows</p>

<p class=Fixed>fChaseMousePoint</p>

<p class=Fixed>fNoMouseDiagonal</p>

<p class=Fixed>fFollowPassages</p>

<p class=Fixed>nRadarLength</p>

<p class=Fixed>nMoveCount</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>fMoveByTwo</p>

<p class=Fixed>fDragMoveDot</p>

<p class=Fixed>fDragIsErase</p>

<p class=Fixed>fDragBigDot</p>

<p class=Fixed>fDragByTwo</p>

<p class=Fixed>fDoDragOnTemp</p>

<p class=Fixed>nEdgeBehavior</p>

<p class=Section2>********************  Inside Settings dialog 
********************</p>

<p class=Fixed>nInside</p>

<p class=Fixed>fCompass</p>

<p class=Fixed>fCompassIsExact</p>

<p class=Fixed>fCellLocation</p>

<p class=Fixed>fMapOverlay</p>

<p class=Fixed>fSealedEntrances</p>

<p class=Fixed>fMountains</p>

<p class=Fixed>nPeakHeight</p>

<p class=Fixed>nCloudCount</p>

<p class=Fixed>fSunAndMoon</p>

<p class=Fixed>fRainbow</p>

<p class=Fixed>fStars</p>

<p class=Fixed>nStarCount</p>

<p class=Fixed>rMeteor</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>fNarrowWalls</p>

<p class=Fixed>nCellSize</p>

<p class=Fixed>nNarrowCellSize</p>

<p class=Fixed>nWallHeight</p>

<p class=Fixed>nViewHeight</p>

<p class=Fixed>nStepHeight</p>

<p class=Fixed>fAllowTextureMapping</p>

<p class=Fixed>rLightFactor</p>

<p class=Fixed>nFogDistance</p>

<p class=Fixed>nClippingPlane</p>

<p class=Fixed>rViewingSpan</p>

<p class=Fixed>nStereoWidth</p>

<p class=Fixed>nSemitransparentWalls</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>nMotionFrames</p>

<p class=Fixed>nRotationFrames</p>

<p class=Fixed>nUpDownFrames</p>

<p class=Fixed>nMotionVelocity</p>

<p class=Fixed>nRotationVelocity</p>

<p class=Fixed>nUpDownVelocity</p>

<p class=Fixed>nHorizontalOffset</p>

<p class=Fixed>nVerticalOffset</p>

<p class=Fixed>nUpDownOffset</p>

<p class=Fixed>nDirectionOffset</p>

<p class=Fixed>fUpDownSmoothNotFree</p>

<p class=Section2>********************  Bitmap Size dialog 
********************</p>

<p class=Fixed>Size3W</p>

<p class=Fixed>Size3X</p>

<p class=Fixed>Size3Y</p>

<p class=Fixed>Size3Z</p>

<p class=Section2>********************  Replace Color dialog  ********************</p>

<p class=Fixed>fRainbowBlend</p>

<p class=Fixed>fStraightColorBlend</p>

<p class=Fixed>nRainbowStart</p>

<p class=Fixed>nRainbowDistance</p>

<p class=Fixed>kBlend1</p>

<p class=Fixed>kBlend2</p>

<p class=Section2>********************  Maze Settings dialog 
********************</p>

<p class=Fixed>fCreateMazesPolished</p>

<p class=Fixed>fApplyCommandsToRectangleSection</p>

<p class=Fixed>fTeleportToEntranceOnMazeCreation</p>

<p class=Fixed>fConnectPolesNeverAddsDeadEnds</p>

<p class=Fixed>fSolveFillersCheckEveryPixel</p>

<p class=Fixed>fSolveFillersConsiderDotsAsExits</p>

<p class=Fixed>fFindAPathFindsRandomPath</p>

<p class=Fixed>fShowCountOfShortestSolutions</p>

<p class=Fixed>nTweakPassagesChances</p>

<p class=Fixed>nTotalMazesCreated</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>nClarifyWeaveWallBias</p>

<p class=Fixed>nClarifyWeavePassageBias</p>

<p class=Fixed>nClarifyWeaveRailingBias</p>

<p class=Fixed>nEntrancePositioning</p>

<p class=Section2>********************  Labyrinth Settings dialog 
********************</p>

<p class=Fixed>nLabyrinthType</p>

<p class=Fixed>nCircuitShape</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>nClassicalSize</p>

<p class=Fixed>fClassicalSizeIsCircuits</p>

<p class=Fixed>sCustomPaths</p>

<p class=Fixed>fCustomAutoiterate</p>

<p class=Fixed>nFanfoldsAllowed</p>

<p class=Fixed>nAsymmetryAllowed</p>

<p class=Fixed>nCircuitPartitioning</p>

<p class=Fixed>nRadiusPartitioning</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>nCustomAlign</p>

<p class=Fixed>nCustomCenterSize</p>

<p class=Fixed>fLabyrinthRoundedEdges</p>

<p class=Section2>********************  Create Settings dialog 
********************</p>

<p class=Fixed>fCreateWithRiver</p>

<p class=Fixed>fHaveRiverAtEdges</p>

<p class=Fixed>fNoRiverFlowback</p>

<p class=Fixed>nOmegaDimensions</p>

<p class=Fixed>nOmegaInnerDimensions</p>

<p class=Fixed>nOmegaEntranceLocation</p>

<p class=Fixed>nOmegaExitLocation</p>

<p class=Fixed>nOmegaDraw</p>

<p class=Fixed>sPlanair</p>

<p class=Fixed>sSegment</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>fCreateWithWallAdding</p>

<p class=Fixed>fTreeValueIsRandomChance</p>

<p class=Fixed>nTreeRiverValue</p>

<p class=Fixed>nForestInitial</p>

<p class=Fixed>nForestAddition</p>

<p class=Fixed>nMaxSpirals</p>

<p class=Fixed>nMaxSpiralWalls</p>

<p class=Fixed>nRandomAddition</p>

<p class=Fixed>nFractalX</p>

<p class=Fixed>nFractalY</p>

<p class=Fixed>nNestingLevel</p>

<p class=Fixed>fAllowIsolationInFractal</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>fCrackLinesMayHeadOff</p>

<p class=Fixed>nCrackLineLength</p>

<p class=Fixed>nCrackPassLimit</p>

<p class=Fixed>nCrackSector</p>

<p class=Fixed>nCavernSparseness</p>

<p class=Fixed>fKruskalBasedOnPicture</p>

<p class=Fixed>fWeaveCrossingsMayCorner</p>

<p class=Fixed>fTiltLinesMakeNoDiamonds</p>

<p class=Fixed>nTiltCellSize</p>

<p class=Section2>********************  Draw Settings dialog 
********************</p>

<p class=Fixed>nHorizontalSize</p>

<p class=Fixed>nVerticalSize</p>

<p class=Fixed>nDepthSize</p>

<p class=Fixed>nHorizontalSizeBias</p>

<p class=Fixed>nVerticalSizeBias</p>

<p class=Fixed>nXStartingLocation</p>

<p class=Fixed>nYStartingLocation</p>

<p class=Fixed>nZStartingLocation</p>

<p class=Fixed>fMoveWithArrowKeys</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>nXVanishingPoint</p>

<p class=Fixed>nYVanishingPoint</p>

<p class=Fixed>nViewingAngleTheta</p>

<p class=Fixed>nVerticalPitchPhi</p>

<p class=Fixed>nDrawMotionVelocity</p>

<p class=Fixed>nDrawRotationVelocity</p>

<p class=Fixed>fViewFromRight</p>

<p class=Fixed>fMergeBlocksTogether</p>

<p class=Section2>********************  Obscure Draw Settings dialog 
********************</p>

<p class=Fixed>fReflectCoordinates</p>

<p class=Fixed>fShadeSky</p>

<p class=Fixed>fShadeGround</p>

<p class=Fixed>fDrawEdges</p>

<p class=Fixed>fShadeObjects</p>

<p class=Fixed>fDoTouchUps</p>

<p class=Fixed>nBorderWidth</p>

<p class=Fixed>nHorizonWidth</p>

<p class=Fixed>nDistanceScale</p>

<p class=Fixed>nXScale</p>

<p class=Fixed>nYScale</p>

<p class=Fixed>nZScale</p>

<p class=Fixed>&nbsp;</p>

<p class=Fixed>kEdge</p>

<p class=Fixed>kSkyHigh</p>

<p class=Fixed>kSkyLow</p>

<p class=Fixed>kGroundHigh</p>

<p class=Fixed>kGroundLow</p>

<p class=Fixed>kObject</p>

<p class=Fixed>nXLightVector</p>

<p class=Fixed>nYLightVector</p>

<p class=Fixed>nZLightVector</p>

<p class=Section2>********************  Scripting only variables 
********************</p>

<p class=A><span class=O>fScreenSaver:</span> This indicates whether Daedalus
is running in screensaver mode. When active, any keyboard or mouse activity
will attempt to exit the program.</p>

<p class=A><span class=O>nMessageTitle:</span> The index of a custom string
variable to use for the title of message boxes displayed by the program. If the
index is invalid or the string zero length, the default string Daedalus is
used.</p>

<p class=A><span class=O>fMessageCopy:</span> If this is set, then whenever
Daedalus shows a message box, the text of it will be automatically copied to
the Windows clipboard, where it may then be pasted into another program. This
is designed for older versions of Windows such as 9x, since on later versions
of Windows such as XP, pressing Control+c will copy the text of any message box
to the clipboard.</p>

<p class=A><span class=O>nSkipMessage:</span> Determines the types of message
boxes that are suppressed when the Skip Message Display setting is on. Setting
this to -1 ignores nothing, and is the same as if Skip Message Display is off.
Setting this to 0 ignores standard messages. Setting this to 1 ignores notice
category messages too, such as the result of commands. Setting this to 2
ignores warnings as well, such as bad user input. Setting this to 3 ignores
serious error conditions, such as out of memory.</p>

<p class=A><span class=O>nXTurtle &amp; nYTurtle:</span> The pixel coordinates
of the current position used by the Turtle operation.</p>

<p class=A><span class=O>nTurtleS:</span> The current drawing scale used by the
Turtle operation.</p>

<p class=A><span class=O>fShowDot2:</span> Like the Show Dot setting in Dot
Settings. When set, the location of the 2nd dot will be visible. The bitmap
pixel corresponding to the 2nd dot will be covered with the color in kDot2.</p>

<p class=A><span class=O>fNoMouseDrag:</span> When set, dragging the mouse in
the window wont update the coordinates of the dot. Left clicking the mouse
still teleports the dot as normal. This can be useful when Drag Is Erase is on,
where a slight nudge of the mouse when left clicking can make unwanted edits to
the bitmap.</p>

<p class=A><span class=O>nAutorepeat:</span> This indicates the command currently
or most recently autorepeated. The values used here are the same as those
returned by the Command function.</p>

<p class=A><span class=O>fFogGround:</span> Normally the Fog Distance inside
setting only affects walls, and does not affect wall texture overlays. When
this is set, floor and ceiling markings, and the tops and bottoms of walls,
along with all wall texture overlays, will also be shaded appropriately based
on their distance.</p>

<p class=A><span class=O>kDot2:</span> When the 2nd dot is visible over one of
the pixels as when fShowDot2 is on, this is the color of the 2nd dot.</p>

<p class=A><span class=O>kSun:</span> The color of the Sun in perspective
inside view.</p>

<p class=A><span class=O>kMoon:</span> The color of the Moon in perspective
inside view.</p>

<p class=A><span class=O>kWall2:</span> The color of the bottoms of walls in
perspective inside view. This only affects default height walls when viewed
from zero Viewing Height. If this is different from the standard Wall or 3D
Wall color, the ceiling will fade between the two colors. If this value is
negative, it has no effect on the display.</p>

<p class=A><span class=O>kSky2:</span> The color of the sky or ceiling at the
horizon in perspective inside view. If this is different from the standard
Inside Sky color, the sky will be a gradient or gradually fade between the two
colors. If this value is negative, it has no effect on the display.</p>

<p class=A><span class=O>kGround2:</span> The color of the ground or floor at
the horizon in perspective inside view. If this is different from the standard
Inside Ground color, the ground will fade between the two colors. If this value
is negative, it has no effect on the display.</p>

<p class=A><span class=O>k3DCeiling2:</span> The color of the sky or ceiling at
the horizon for 3D Mazes (when below the top level) in perspective inside view.
If this is different from the standard 3D Ceiling color, the ceiling will fade
between the two colors. If this value is negative, it has no effect on the
display.</p>

<p class=A><span class=O>kMountain2:</span> The color of the top of mountains
in perspective inside view. If this is different from the standard Inside Mountain color, mountains will be a gradient or gradually fade between the two
colors. If this value is negative, it has no effect on the display.</p>

<p class=A><span class=O>kCloud2:</span> The color of the bottom of clouds in
perspective inside view. If this is different from the standard Inside Cloud
color, clouds will be a gradient or gradually fade between the two colors. If
this value is negative, it has no effect on the display.</p>

<p class=A><span class=O>fRainbow:</span> Sets whether a rainbow is drawn in
the perspective inside view, which will be positioned opposite the sun. The
rainbow will be generated once and placed in custom bitmap -5, and regenerated
whenever the window is resized.</p>

<p class=A><span class=O>nRainbow:</span> Defines how the rainbow is drawn in
the perspective inside view. The 1000000s place and above indicate the height
of the rainbow or its diameter in proportion to the window height, ranging from
0 (miniscule) to 99 (touching the top of the screen) and beyond. The 100000s
and 10000s place indicate the vertical offset of the rainbow, ranging from 0
(as high as possible) to 99 (completely submerged below the horizon). The
1000s and 100s place indicate the width of the rainbow arc as a proportion of
its radius, ranging from 0 (hairline) to 99 (a solid semicircle). The 10s and
1s place indicate the transparency of the rainbow, ranging from 0 (completely
opaque) to 99 (completely invisible). If nRainbow is negative, the digit
placements will be interpreted the same, however a rainbow wont be drawn, but
rather the existing contents of custom bitmap -5 will be stretched across the
appropriate area of the screen.</p>

<p class=A><span class=O>nGround:</span> Sets the bottom limit for Viewing
Height that one can descend to via the Lower command in the perspective inside
view. Usually this is 0, but may be lower if one wants to allow worms eye
views barely above the ground plane, or even a large negative number to allow
descending underground.</p>

<p class=A><span class=O>nHorizon:</span> Indicates the offset of the horizon
line in the perspective inside view, as a proportion of the vertical size of
the window.  The value 0 is the default of the horizon centered in the middle
of the window, 1000 has the horizon at the bottom of the window, and -1000 has
the horizon at the top of the window.</p>

<p class=A><span class=O>nSunMoon:</span> This affects the Sun or the Moon in
the perspective inside view. When the Sun is being displayed, this indicates
the length of the Suns rays, as a percentage of the diameter of the Suns
disk. When the Moon is being displayed, this indicates the phase or percent fullness
of the Moon. Positive numbers show a waxing Moon or the left hand side shaded,
while negative numbers show a waning Moon.</p>

<p class=A><span class=O>nSunMoonY:</span> This sets the height of the Sun and
Moon in the sky in the perspective inside view. When 0 the middle of the Sun or
Moon will intersect the top of the screen, and when 1000 the middle will
intersect the horizon. Changing this can simulate the Sun/Moon rising/setting.</p>

<p class=A><span class=O>nStarColor:</span> This number indicates how stars and
meteors in the perspective inside view should be colored. Stars are usually
grayscale. The millions place in the number indicates the percentage chance
that a star should have some part of its color adjusted, e.g. 20XXXXXX where X
is any digit means a 20% chance a star will not just be a shade of gray. The
next two digits (100000s and 10000s place) indicate how to affect the red
component of the color, the next two digits (1000s and 100s place) indicate
how to affect the green component, and the low two digits (10s and 1s place)
indicate how to affect the blue component. For each two digit pair, the high
digit means how much to allow that component to be decreased, and the low digit
means how much to allow the component to be increased. Each digit ranges from
0-9, where 0 means dont add or subtract at all, 9 means add or subtract 255,
and other digits proportion appropriately. For example, 300006 means that for
those stars that are colored, up to 85 may be subtracted from its red
component, or up to 170 may be added to its blue component. That will make stars
have either a cyan (subtracting red) or blue (adding blue) tinge to them. The
default value for this number is 10990099 which means a 10% chance a star may
have its red or blue components arbitrarily increased or decreased, which
allows stars to be red (adding red), cyan (subtracting red), blue (adding
blue), or yellow (subtracting blue), but never green (adding green) or magenta
(subtracting green).</p>

<p class=A><span class=O>fSkyAll:</span> Makes the Maze in perspective inside
view seem to be suspended in air, instead of on a flat plain. Stars, meteors,
and clouds will display over the entire background instead of just the top
half, and mountains will display at the bottom instead of the middle. Its
recommended to set the Inside Sky and Ground colors the same with this, to
avoid the appearance of a horizon in the middle. This setting also affects the
wireframe and patch renderings.</p>

<p class=A><span class=O>fSky3D:</span> When this flag is set, the ceiling area
in 3D Mazes in the perspective inside view will show all the scenery as seen in
2D Mazes and the top level of 3D Mazes. Normally 3D Mazes are rendered as if
lower levels are underground, where this can be used to make all floors seem
above ground. Its recommended to set the 3D Ceiling color the same as the Sky
color with this, so the sky looks the same on all levels. This is used by the Survivor
Maze #5 script to allow windows that can be looked out on each floor of the
vertical Maze.</p>

<p class=A><span class=O>fFrameDelay:</span> When set, the perspective inside
view will show an indicator of the frame delay on the fourth row from the
bottom, or how long in milliseconds it took Daedalus to render the scene in
question. Note on most systems this value is rounded to units of approximately
15 or 16 milliseconds, so not all numbers are possible.</p>

<p class=A><span class=O>nFrameDelay:</span> Contains the most recent frame
delay number as displayed when fFrameDelay is set. If the value is -1, no
perspective inside view has been rendered yet with fFrameDelay on.</p>

<p class=A><span class=O>fNoCompass:</span> When this flag is set, the compass
in perspective inside view will never be shown, even when the Compass inside setting
is active. This is used when overriding the default compass display with a
macro, to avoid having the standard display of the compass overlap with the
customized compass.</p>

<p class=A><span class=O>fNoLocation:</span> When this flag is set, the
location in perspective inside view will never be shown, even when the Cell
Location inside setting is active. This is used when overriding the default
location display with a macro, such as in the 4D Mazes or Giga Mazes scripts,
to avoid having the standard display of the location overlap with the
customized location.</p>

<p class=A><span class=O>fNoSubmerge:</span> When this flag is set, then in the
perspective inside view, having the viewing location being inside of a solid or
semitransparent block will treat that block as completely invisible.</p>

<p class=A><span class=O>nStepDown:</span> This is like nStepHeight, and only
has an effect when the Step Height mode is active. This controls the maximum
amount one is allowed to step down when moving between variable height cells.
It can be used to prevent one from stepping off cliffs, but still be able to go
down gentle stairs. If this value is negative, one is allowed to fall down any
distance.</p>

<p class=A><span class=O>fRedrawAfter:</span> If this flag is set, and the
inside display mode is set to Smooth Movement, and the After Move To New Cell
event is set, then animation during movement will not redraw the screen at its
final position. Rather its assumed that the After Move To New Cell event will
redraw the screen. This is used by scripts that involve some edit happening
after each time the user moves, such as the monsters updating in the Pac-Man
and Dragonslayer scripts. This avoids an extra screen update and hence results
in smoother movement, since the screen will be made to update anyway after the
monsters move.</p>

<p class=B>This setting also affects the Autorepeat Last Command flag, and will
cause it to not automatically update the screen after repeating the command if
another update is being done at the same time. For example, if one is moving in
the perspective inside view, this will cause a single screen update to cover
both the repeated command and the movement, instead of two separate updates,
which looks smoother. This is used by scripts such as Safari Maze to have
smooth movement combined with background animation.</p>

<p class=A><span class=O>fMarkColor:</span> Makes the color of floor and
ceiling markings in perspective inside view be taken from the temporary color
bitmap instead of the main color bitmap as normal. Semitransparent or variable
height walls allow both a wall and floor marking to be visible at the same
spot, in which case one may want them to have separate colors.</p>

<p class=A><span class=O>fMarkAll:</span> Makes every cell in the perspective
inside view have a ground marking. This is a quick way to have ground markings
everywhere without having to maintain the temporary monochrome bitmap with
solid on pixels.</p>

<p class=A><span class=O>fMarkBlock:</span> If this flag is set, then in the
perspective inside view, the west and east sides of raised ground elevation
markings will be the original color for that cell. The top surface of the
ground marking along with the north and south faces will be that color darkened
or lightened appropriately. Normally the top of the ground marking is the
original cell color, and the four side faces are that color shaded
appropriately. This setting allows ground markings and variable height walls of
the same color to look the same.</p>

<p class=A><span class=O>nSkyMark:</span> Turns on ceiling markings in
perspective inside view, i.e. points to which custom bitmap slot defines them.
On pixels in the monochrome bitmap in that slot indicate where ceiling markings
are. The color bitmap indicates the color of markings, where if that color
bitmap doesnt exist, the colors will be same as the floor markings. By default
this is -1, meaning ceiling markings are turned off.</p>

<p class=A><span class=O>nWallVariable:</span> Turns on variable height walls
in perspective inside view, i.e. points to which custom bitmap slot defines
them. On pixels in the monochrome bitmap there indicate which walls are
variable height as opposed to default height. Pixels in the color bitmap there
indicate the height of each block, where the low 12 bits indicate the top
elevation, and the high 12 bits the bottom. By default this is -1, meaning
variable height walls are turned off.</p>

<p class=A><span class=O>nFogLit:</span> Turns on lit textures for cells in the
perspective inside view, i.e. points to which custom bitmap slot defines them. On
pixels in the monochrome bitmap at that slot determine cells that ignore fog
settings. The color bitmap in that slot is ignored. By default this is -1,
meaning all cells have the same dimness when fog is set.</p>

<p class=A><span class=O>nTexture:</span> This contains the index of the
texture bitmap to use for the background area in the perspective inside view,
for 2D Mazes and the top level of 3D Mazes. If this doesnt point to a valid
texture, the solid inside sky and ground colors are used instead of a texture.
Note this variable gets set by the Background apply texture command.</p>

<p class=A><span class=O>nTexture3:</span> This contains the index of the
texture bitmap to use for the background area in the perspective inside view,
for all levels in 3D Mazes except the top level. If this doesnt point to a
valid texture, the solid inside 3D ceiling and ground colors are used instead
of a texture. Note this variable gets set by the Background apply texture
command.</p>

<p class=A><span class=O>nTextureWall:</span> Turns on wall textures for the
vertical surfaces of walls in perspective inside view, i.e. points to which
custom bitmap slot defines them. Pixels in the color bitmap in that slot indicate
the texture for each face, where each group of 6 bits indicates the texture for
the north, west, south, and east faces. By default this is 0, meaning custom
bitmap slot #0 is used for texture mapping.</p>

<p class=A><span class=O>nTextureGround:</span> Turns on floor and ceiling
textures in perspective inside view, i.e. points to which custom bitmap slot
defines them. Works similar to wall texture mapping, where pixels in the color
bitmap in that slot point to the custom bitmap slot containing the textures. The
low 12 bits indicate the floor texture, and the high 12 bits the ceiling, where
0 means no texture. The monochrome bitmap there is used for masks, and
indicates whether monochrome overlays are black or white. By default this is
-1, meaning floor and ceiling textures are turned off.</p>

<p class=A><span class=O>nTextureBlock:</span> Turns on texture mapping for the
top and bottom surfaces of walls in perspective inside view, i.e. points to
which custom bitmap slot defines them. Works similar to ground texture mapping,
where pixels in the color bitmap in that slot point to the custom bitmap slot
containing the textures. The low 12 bits indicate the top texture, and the high
12 bits the bottom, where 0 means no texture. The monochrome bitmap there is
used for masks, and indicates whether monochrome overlays are black or white.
By default this is -1, meaning block textures are turned off.</p>

<p class=A><span class=O>nMarkElev:</span> Turns on texture mapping for the sides
of elevated ground markings in the perspective inside view, i.e. points to
which custom bitmap slot defines them. Works similar to wall texture mapping, in
which pixels in the color bitmap in that slot point to the custom bitmap slots
containing the textures. The monochrome bitmap in that slot is unused. By
default this is -1, meaning ground elevation textures are turned off.</p>

<p class=A><span class=O>fTextureDual:</span> Controls whether textures on the
sides of blocks and elevated ground are duplicated on north/south and west/east
faces. If set, then the low 12 bits of a texture index indicate the texture
bitmap for the north and south faces, and the high 12 bits of the texture index
indicate the texture for the west and east faces. This setting allows more
texture possibilities (12 bits instead of just 6 bits when each face has its
own texture) however it does mean that textures on opposite sides of a block
have to be the same.</p>

<p class=A><span class=O>fTextureBlend:</span> When set, solid color textures
in the perspective inside view (whether opaque or semitransparent) will be
blended with the color of the block behind the texture. This is used in the
Hunger Games script to for example have trees of many different colorings,
without having to have a separate tree texture for each color.</p>

<p class=A><span class=O>nMarkElevX1, nMarkElevY1, nMarkElevX2, nMarkElevY2:</span>
Controls how hills are generated by the Ground Elevation command. The X
variables indicate the frequency of hills or how often wrinkles happen, and the
Y variables indicate the amplitude of hills or how high they can reach. Both
the 1 and 2 values are generated randomly and added together. Usually the
1 numbers are larger and define a rough general shape, and the 2 numbers
are smaller and define detail within it, resulting in a simple fractal.</p>

<p class=A><span class=O>nMazeCellMax:</span> Sets the number of cells to allow
generating in a Maze before stopping the command. If negative, commands will
never stop prematurely. Commands will automatically decrement this variable, so
subsequent Maze generations wont halt unless the variable is reset. This
allows freezing a command part way through for saving or other purposes. For
example, the Hunger Games script uses this in combination with Prims
Algorithm to create random inkblot shapes to use for lakes, mountains, and
meadows.</p>

<p class=A><span class=O>nHuntType:</span> Determines how the hunt and kill
Maze generation algorithm command hunts for cells that arent yet part of the
Maze. Setting this to 0 searches horizontal row by row until a new cell is
found, which is simple but can result in a horizontal bias. Setting this to 1
alternates searching in both rows and columns until a new cell is found, which
is more balanced. Setting this to 2 searches outward from the last cell in a
spiral pattern until a new cell is found, which appears even smoother but can
be slower.</p>

<p class=A><span class=O>nFractalDepth:</span> Indicates the maximum chip depth
to search for solutions in the Find Recursive Fractal Maze solving command.</p>

<p class=A><span class=O>nFractalLength:</span> Indicates the maximum step
length to search for solutions in the Find Recursive Fractal command.</p>

<p class=A><span class=O>nFractalType:</span> The type of fractal Maze created
by the FractalPart operation. If 0, the Maze will be nested cells created using
the hunt and kill algorithm. If 1, the Maze will be created with the binary
tree algorithm. If 2, the Maze will be created with the recursive division
algorithm. If 3, the Maze will be a unicursal Labyrinth. If 4, the Maze will be
a variation of the classical seven circuit Labyrinth with a number of circuits
depending on the Mazes size. This setting can be seen in action in the
Worlds Largest Maze script, by pressing F10 to set the algorithm.</p>

<p class=A><span class=O>nStretch:</span> This affects the Stretch To Window
display setting. When set to 0, some rows will simply be skipped. When set to
1, then if any row in the range mapping to the displayed pixel is on the pixel
will be on. When set to 2, then if any row is off the pixel will be off. This
is basically a wrapper around the SetStretchBltMode Windows API. Note on some machines, values 1 and 2 will display slower. Other machines dont support this
at all, where changing the variable will have no visible effect.</p>

<p class=A><span class=O>fGraphNumber:</span> This flag affects the Graph
Distance and Graph Walls commands, the various With Color commands on the Dot
Color submenu, the Mandelbrot operation, and how color pixel values are
displayed in the Dot Settings dialog. When set, color pixels wont be set to
colors as defined in the Replace Color dialog, but rather pixels will be set to
raw distance numbers. This can for example be used by a script to determine the
number of moves you are from the entrance or exit of a Maze as you move around.</p>

<p class=A><span class=O>nGrayscale:</span> This value affects the Make
Grayscale command, and indicates the brightness to give to each of the RGB channels. The first three digits indicate the red brightness, the second three the green
brightness, and the last three the blue brightness. Each three digit number is
a fraction ranging from 0 (minimum) to 999 (maximum), where all three shouldnt
add to over 1000. The default value is 299587114, which indicates brightness
factors of 0.299, 0.587, 0.114 for the RGB channels. If this value is negative,
each channel will be given an equal 1/3 brightness factor.</p>

<p class=A><span class=O>fArrowKeysFree:</span> This setting only plays a role
when Move With Arrow Keys in Draw Settings is on. It causes movement in the
wireframe and patch renderings to feel more fluid, like playing a video game.
You dont have to wait for key repeat to kick in, which means holding down a
key immediately continuously moves, and you can also hold down two keys at once
(e.g. move forward plus rotate) and have them both take effect. The speed at
which continuous movement happens is controlled by the Repeat Delay In Msec
field in Display Settings. This is like the Very Free Movement Inside Display
Mode, but applied to the wireframe and patch renderings.</p>

<p class=A><span class=O>rTransparency:</span> Daedalus supports
semitransparency in perspective patch renderings. This sets the default
transparency to use for patches in patch files loaded into the program that dont
already have a transparency defined for them, and also the transparency to use
for patches created with the Make Patch Bitmap Overview command. This value
ranges from 0 to 10000, where 0 is no transparency, and 10000 is completely
invisible. This setting also affects how transparent semitransparent walls are
in the perspective inside view.</p>

<p class=A><span class=O>nFogDistance2:</span> Daedalus supports fog effects in
perspective patch renderings. If this field is non-zero, the color of patches
will increasingly fade the farther away they are. The larger the number, the
greater the distance before the wall color will completely fade. Specifically
its equal to the number of draw units before the fade limit is reached. The
color things fade to is stored in the Edge Color obscure draw setting.</p>

<p class=A><span class=O>nWireWidth:</span> Determines the maximum width of
lines drawn in the wireframe display. Setting this to 0 always draws hairline
thin one pixel wide lines, no matter their distance from the viewer. Setting
this to 1 draws close lines one pixel wider horizontally, and the remainder as
with setting 0. Setting this to 2 draws closer lines one pixel wider
horizontally and vertically, and farther lines as with settings 1 and 0.
Setting this to 3 draws the closest lines two pixels wider horizontally and
vertically, and farther lines as with lower settings.</p>

<p class=A><span class=O>fWireSort:</span> Determines whether lines in the
wireframe display are sorted by distance before being drawn, to ensure that far
away lines arent drawn on top of close lines. This generally isnt necessary
when the wireframe line width stored in nWireWidth is low, because intersecting
lines will have little if any overlapping area. Sorting may slow down the
rendering time, which is why theres an option to turn it off.</p>

<p class=A><span class=O>nWireDistance:</span> This setting only plays a role
when the wireframe width setting nWireWidth is more than zero. It determines
how many coordinate units away from the viewer the midpoint of lines must get
before theyre displayed in the next narrower category.</p>

<p class=A><span class=O>nDrawFaceOrigin:</span> Determines whether the
wireframe and patch displays force the rendering to face the origin, pointing
at X, Y, Z coordinate 0, 0, 0. Setting this to 0 doesnt face the origin at
all. Setting 1 makes the rendering face the origin, but doesnt affect the actual
direction one is moving in Draw Settings, which allows one to move along one
trajectory while continually facing the origin. Setting 2 makes the rendering
face the origin, and also updates the actual direction one is facing in Draw
Settings, which allows one to sidestep in order to continually circle around
the origin.</p>

<p class=A><span class=O>nWireframeSize:</span> Contains the current number of
line segments in the wireframe scene in memory. This variable can be changed to
truncate the list or add space for new lines at the end of the list.</p>

<p class=A><span class=O>nPatchSize:</span> Contains the current number of
patches in the patch scene in memory. This variable can be changed to truncate
the list or add space for new patches at the end of the list.</p>

<p class=A><span class=O>fMandelbrotShip:</span> When this is set, the
Mandelbrot operation will generate the Burning Ship style of fractal instead
of the standard Mandelbrot fractal. The Burning Ship has an asymmetric image
(unlike Mandelbrot) which looks like a ship with flames on its deck. It is
produced by a similar formula as Mandelbrot, except the absolute value is taken
of each dimension before squaring. The Burning Ship can be toggled to in the Mandelbrot
Set Fractal script by pressing F11.</p>

<p class=A><span class=O>nSoundDelay:</span> Controls the behavior of sounds
played with the Sound operation. If negative, sounds are played synchronously,
and the program will pause until the sound finishes. Otherwise, sounds are
played asynchronously, and the program will continue running while the sound
plays. If a sound is already playing when the Sound operation is called again,
then the old sound will be interrupted and stopped when the new sound begins.
If positive, this variable indicates how long in milliseconds the old sound
should be allowed to play before the new sound interrupts it. For example, if
set to 3000, and a sound was started one second ago, then the program will
pause for two seconds before interrupting the old sound. This ensures a sound
can play for a minimum length of time before the next sound starts.</p>

<p class=A><span class=O>nFileLock:</span> Points to a custom string variable
naming a mutex to use when reading files. A mutex is an operating system
feature which ensures mutual exclusion, so that two processes arent accessing
a file at the same time. If the file is locked by another program using the
same mutex, then Daedalus wont just fail right away, but will rather wait up
to one second for the other process to release the mutex. This is used in the
creation of videos such as <a href="https://www.youtube.com/watch?v=UdRaDGXBV-0">https://www.youtube.com/watch?v=UdRaDGXBV-0</a>
in which Daedalus is continually reloading a file and rendering a scene, while
another process is continually updating and rewriting the contents of that
file.</p>

<p class=A><span class=O>fRndOld:</span> Controls whether the random number
generator generates numbers using the system rand() function. The default
random number generator in Daedalus is faster and has much better randomness
properties, so this should only be set to reproduce behavior from versions of
the program before 3.1.</p>

<p class=A><span class=O>fNoExit:</span> When set, the program wont exit.
Attempting to exit will display a warning message. In the command line only
version of the program, after running the initial command line, the program
will continually prompt in the console for additional command lines to run.</p>

<p class=A><span class=O>nAllocations:</span> Contains the total number of memory
allocation buffers currently held by the program, incrementing each time a new
buffer is allocated, and decrementing each time a buffer is freed. If this
variable isnt zero when the program exits, a memory leak error message will be
displayed.</p>

<p class=A><span class=O>nAllocsTotal:</span> Contains the total number of
memory allocation buffers ever held by the program, incrementing each time a
new buffer is allocated, and never decrementing. Combined with the nAllocations
variable, this can be used to analyze memory usage behaviors of the program.</p>

<p class=A><span class=O>nAllocsSize:</span> Contains the total size in bytes
of all memory allocation buffers ever made by the program, increasing each time
a new buffer is allocated, and never decreasing. Combined with the other memory
allocation variables, this can be used to analyze memory usage behaviors of the
program.</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=function>FUNCTIONS</a></p>

</div>

<p class=Section2>********************  Constants  ********************</p>

<p class=A><span class=O>False:</span> Constant. Always returns 0.</p>

<p class=A><span class=O>True:</span> Constant. Always returns 1.</p>

<p class=A><span class=O>Off:</span> Constant. Always returns 0.</p>

<p class=A><span class=O>On:</span> Constant. Always returns 1.</p>

<p class=A><span class=O>Color constants:</span> Each solid color that can be
entered into color fields in dialogs is also a constant with the same name. The
23 color constants are: Black, Maroon, DkGreen, Maize, DkBlue, Purple, DkCyan,
LtGray, Gray, Red, Green, Yellow, Blue, Magenta, Cyan, White, Grey, Violet,
Aqua, DkGray, Orange, Pink, Brown.</p>

<p class=Section2>********************  Arithmetic functions 
********************</p>

<p class=A><span class=O>Add &lt;num1&gt; &lt;num2&gt;:</span> Addition.
Returns the sum of &lt;num1&gt; and &lt;num2&gt;.</p>

<p class=A><span class=O>Sub &lt;num1&gt; &lt;num2&gt;:</span> Subtraction.
Returns &lt;num2&gt; subtracted from &lt;num1&gt;.</p>

<p class=A><span class=O>Mul &lt;num1&gt; &lt;num2&gt;:</span> Multiplication.
Returns &lt;num1&gt; times &lt;num2&gt;.</p>

<p class=A><span class=O>Div &lt;num1&gt; &lt;num2&gt;:</span> Division.
Returns &lt;num1&gt; divided by &lt;num2&gt;. If &lt;num2&gt; is 0, returns 0.</p>

<p class=A><span class=O>Mod &lt;num1&gt; &lt;num2&gt;:</span> Modulus. Returns
the remainder when &lt;num1&gt; is divided by &lt;num2&gt;. If &lt;num2&gt; is
0, returns 0.</p>

<p class=A><span class=O>Neg &lt;num&gt;:</span> Negation. Returns the negative
of &lt;num&gt;.</p>

<p class=A><span class=O>Inc &lt;num&gt;:</span> Increment. Returns &lt;num&gt;
plus 1.</p>

<p class=A><span class=O>Dec &lt;num&gt;:</span> Decrement. Returns &lt;num&gt;
minus 1.</p>

<p class=A><span class=O>Pow &lt;num1&gt; &lt;num2&gt;:</span> Power. Returns
&lt;num1&gt; raised to the &lt;num2&gt; power. If &lt;num2&gt; is negative,
returns 1. If the result overflows, returns 0.</p>

<p class=Section2>********************  Boolean functions  ********************</p>

<p class=A><span class=O>Equ &lt;num1&gt; &lt;num2&gt;:</span> Equality.
Returns whether &lt;num1&gt; equals &lt;num2&gt;.</p>

<p class=A><span class=O>Neq &lt;num1&gt; &lt;num2&gt;:</span> Inequality.
Returns whether &lt;num1&gt; does not equal &lt;num2&gt;.</p>

<p class=A><span class=O>Lt &lt;num1&gt; &lt;num2&gt;:</span> Less than.
Returns whether &lt;num1&gt; is less than &lt;num2&gt;.</p>

<p class=A><span class=O>Gt &lt;num1&gt; &lt;num2&gt;:</span> Greater than.
Returns whether &lt;num1&gt; is greater than &lt;num2&gt;.</p>

<p class=A><span class=O>Lte &lt;num1&gt; &lt;num2&gt;:</span> Less than or
equal. Returns whether &lt;num1&gt; is less than or equal to &lt;num2&gt;.</p>

<p class=A><span class=O>Gte &lt;num1&gt; &lt;num2&gt;:</span> Greater than or
equal. Returns whether &lt;num1&gt; is greater than or equal to &lt;num2&gt;.</p>

<p class=A><span class=O>Not &lt;num&gt;:</span> Logical not. Returns whether
&lt;num&gt; is zero. Like the ! operator in C.</p>

<p class=A><span class=O>And &lt;num1&gt; &lt;num2&gt;:</span> Logical and.
Returns the bits of &lt;num1&gt; anded with &lt;num2&gt;. This function does
not do short circuit evaluation, in that both arguments are always evaluated
even if the first is false. Like the &amp; operator in C.</p>

<p class=A><span class=O>Or &lt;num1&gt; &lt;num2&gt;:</span> Logical or.
Returns the bits of &lt;num1&gt; ored with &lt;num2&gt;. This function does not
do short circuit evaluation, in that both arguments are always evaluated even
if the first is true. Like the | operator in C.</p>

<p class=A><span class=O>Xor &lt;num1&gt; &lt;num2&gt;:</span> Logical
exclusive or. Returns the bits of &lt;num1&gt; exclusive ored with
&lt;num2&gt;. Like the ^ operator in C.</p>

<p class=A><span class=O>Inv &lt;num&gt;:</span> Logical inverse. Returns
&lt;num&gt; with all its bits flipped. Like the ~ operator in C.</p>

<p class=A><span class=O>&lt;&lt; &lt;num1&gt; &lt;num2&gt;:</span> Shift left.
Returns &lt;num1&gt; with all its bits shifted left &lt;num2&gt; times. Like
the &lt;&lt; operator in C.</p>

<p class=A><span class=O>&gt;&gt; &lt;num1&gt; &lt;num2&gt;:</span> Shift
right. Returns &lt;num1&gt; with all its bits shifted right &lt;num2&gt; times.
Like the &gt;&gt; operator in C.</p>

<p class=Section2>********************  Mathematical functions 
********************</p>

<p class=A><span class=O>Odd &lt;num&gt;:</span> Odd. Returns whether
&lt;num&gt; is an odd number.</p>

<p class=A><span class=O>Abs &lt;num&gt;:</span> Absolute value. Returns the
absolute value of &lt;num&gt;.</p>

<p class=A><span class=O>Sgn &lt;num&gt;:</span> Sign. Returns the sign of
&lt;num&gt;. Returns -1 if its negative, 0 if zero, and 1 if positive.</p>

<p class=A><span class=O>Min &lt;num1&gt; &lt;num2&gt;:</span> Minimum. Returns
the minimum of &lt;num1&gt; and &lt;num2&gt;.</p>

<p class=A><span class=O>Max &lt;num1&gt; &lt;num2&gt;:</span> Maximum. Returns
the maximum of &lt;num1&gt; and &lt;num2&gt;.</p>

<p class=A><span class=O>Rnd &lt;num1&gt; &lt;num2&gt;:</span> Random. Returns
a random number between &lt;num1&gt; and &lt;num2&gt;.</p>

<p class=A><span class=O>?: &lt;flag&gt; &lt;num1&gt; &lt;num2&gt;:</span>
If/else. If &lt;flag&gt; is true, returns &lt;num1&gt;, otherwise returns
&lt;num2&gt;. This function does not do short circuit evaluation, in that all
arguments are evaluated regardless of the flag. Like the ?: operator in C.</p>

<p class=A><span class=O>Sqr &lt;num&gt;:</span> Square root. Return the square
root of &lt;num&gt;, rounded down. For negative numbers this returns the same
value as if the number were positive.</p>

<p class=A><span class=O>Dist &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;
&lt;num4&gt;:</span> Distance. Returns the distance between coordinates
&lt;num1&gt;, &lt;num2&gt; and &lt;num3&gt;, &lt;num4&gt;.</p>

<p class=A><span class=O>Sin &lt;num1&gt; &lt;num2&gt;:</span> Sine. Returns
&lt;num1&gt; times the sine of &lt;num2&gt; degrees. Useful for plotting the
vertical coordinates along a circle of radius &lt;num1&gt;.</p>

<p class=A><span class=O>Cos &lt;num1&gt; &lt;num2&gt;:</span> Cosine. Returns
&lt;num1&gt; times the cosine of &lt;num2&gt; degrees. Useful for plotting the
horizontal coordinates along a circle of radius &lt;num1&gt;.</p>

<p class=A><span class=O>Tan &lt;num1&gt; &lt;num2&gt;:</span> Tangent. Returns
&lt;num1&gt; times the tangent of &lt;num2&gt; degrees.</p>

<p class=A><span class=O>Asin &lt;num1&gt; &lt;num2&gt;:</span> ArcSine.
Returns the arcsine of &lt;num1&gt; divided by &lt;num2&gt;, in degrees.</p>

<p class=A><span class=O>Acos &lt;num1&gt; &lt;num2&gt;:</span> ArcCosine.
Returns the arccosine of &lt;num1&gt; divided by &lt;num2&gt;, in degrees.</p>

<p class=A><span class=O>Atan &lt;num1&gt; &lt;num2&gt;:</span> ArcTangent.
Returns the arctangent of &lt;num1&gt; divided by &lt;num2&gt;, in degrees.</p>

<p class=A><span class=O>Ang &lt;num1&gt; &lt;num2&gt;:</span> Angle. Returns
the angle in degrees (ranging from 0 to 359) of a line going from the origin to
coordinates &lt;num1&gt;, &lt;num2&gt;.</p>

<p class=A><span class=O>Sin2 &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;:</span>
Sine. Like Sin but assumes a circle is divided into &lt;num3&gt; equal slices
instead of 360 degrees. Useful for when precision to a fraction of a degree or
an odd ratio is needed.</p>

<p class=A><span class=O>Cos2 &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;:</span>
Cosine. Like Cos but assumes a circle is divided into &lt;num3&gt; equal slices
instead of 360 degrees.</p>

<p class=A><span class=O>Tan2 &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;:</span>
Tangent. Like Tan but assumes a circle is divided into &lt;num3&gt; equal slices
instead of 360 degrees.</p>

<p class=A><span class=O>Asin2 &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;:</span>
ArcSine. Like Asin but assumes a circle is divided into &lt;num3&gt; slices
instead of 360 degrees. Useful for when precision to a fraction of a degree or
an odd ratio is needed.</p>

<p class=A><span class=O>Acos2 &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;:</span>
ArcCosine. Like Acos but assumes a circle is divided into &lt;num3&gt; equal
slices instead of 360 degrees.</p>

<p class=A><span class=O>Atan2 &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;:</span> ArcTangent.
Like Atan but assumes a circle is divided into &lt;num3&gt; equal slices
instead of 360 degrees.</p>

<p class=A><span class=O>Ang2 &lt;num1&gt; &lt;num2&gt; &lt;num3&gt;:</span>
Angle. Like Ang but assumes a circle is divided into &lt;num3&gt; slices
instead of 360 degrees. Useful for when precision to a fraction of a degree or
an odd ratio is needed.</p>

<p class=Section2>********************  String functions  ********************</p>

<p class=A><span class=O>Len &lt;string&gt;:</span> Length. Returns the number
of characters in &lt;string&gt;. If &lt;string&gt; is invalid, returns 0.</p>

<p class=A><span class=O>Char &lt;string&gt; &lt;num&gt;:</span> Character.
Returns the ASCII value of the &lt;num&gt;th character in &lt;string&gt;. If
&lt;string&gt; is invalid or &lt;num&gt; references a character beyond the
limits of the string, returns -1.</p>

<p class=A><span class=O>Num &lt;string&gt;:</span> Number. Returns
&lt;string&gt; converted to a number. Useful for getting a number from the
result of the GetString operation.</p>

<p class=A><span class=O>Real &lt;string&gt; &lt;num&gt;:</span> Real number. Like
Num but multiplies the result by 10 to the &lt;num&gt; power, or shifts the
decimal point to the left by &lt;num&gt;. Useful to parse a floating point real
number into a fixed point integer. </p>

<p class=A><span class=O>EquStr &lt;string1&gt; &lt;string2&gt;:</span> String
equality. Returns whether &lt;string1&gt; equals &lt;string2&gt;.</p>

<p class=A><span class=O>NeqStr &lt;string1&gt; &lt;string2&gt;:</span> String
inequality. Returns whether &lt;string1&gt; does not equal &lt;string2&gt;.</p>

<p class=A><span class=O>LtStr &lt;string1&gt; &lt;string2&gt;:</span> String
less than. Returns whether &lt;string1&gt; is less than &lt;string2&gt; in
ASCII sorting order.</p>

<p class=A><span class=O>GtStr &lt;string1&gt; &lt;string2&gt;:</span> String
greater than. Returns whether &lt;string1&gt; is greater than &lt;string2&gt;
in ASCII sorting order.</p>

<p class=A><span class=O>LteStr &lt;string1&gt; &lt;string2&gt;:</span> String
less than or equal. Returns whether &lt;string1&gt; is less than or equal to
&lt;string2&gt;.</p>

<p class=A><span class=O>GteStr &lt;string1&gt; &lt;string2&gt;:</span> String
greater than or equal. Returns whether &lt;string1&gt; is greater than or equal
to &lt;string2&gt;.</p>

<p class=A><span class=O>EquStrI &lt;string1&gt; &lt;string2&gt;:</span> String
equality. Like EquStr but does a case insensitive string compare.</p>

<p class=A><span class=O>NeqStrI &lt;string1&gt; &lt;string2&gt;:</span> String
inequality. Like NeqStr but does a case insensitive string compare.</p>

<p class=A><span class=O>LtStrI &lt;string1&gt; &lt;string2&gt;:</span> String
less than. Like LtStr but does a case insensitive string compare.</p>

<p class=A><span class=O>GtStrI &lt;string1&gt; &lt;string2&gt;:</span> String
greater than. Like GtStr but does a case insensitive string compare.</p>

<p class=A><span class=O>LteStrI &lt;string1&gt; &lt;string2&gt;:</span> String
less than or equal. Like LteStr but does a case insensitive string compare.</p>

<p class=A><span class=O>GteStrI &lt;string1&gt; &lt;string2&gt;:</span> String
greater than or equal. Like GteStr but does a case insensitive string compare.</p>

<p class=A><span class=O>InChar &lt;string&gt; &lt;num&gt;:</span> Returns the
position of the first instance of character &lt;num&gt; within &lt;string&gt;. If
&lt;string&gt; is invalid or the character isnt anywhere in the string,
returns -1.</p>

<p class=Section2>********************  Daedalus specific functions 
********************</p>

<p class=A><span class=O>SizeX:</span> Horizontal size. Returns the horizontal
pixel size of the main bitmap.</p>

<p class=A><span class=O>SizeY:</span> Vertical size. Returns the vertical
pixel size of the main bitmap.</p>

<p class=A><span class=O>SizeCX:</span> Horizontal color size. Returns the
horizontal pixel size of the color bitmap.</p>

<p class=A><span class=O>SizeCY:</span> Vertical color size. Returns the
vertical pixel size of the color bitmap.</p>

<p class=A><span class=O>Get &lt;x&gt; &lt;y&gt;:</span> Get pixel. Returns the
state of the pixel at the given coordinates on the main bitmap. Returns off for
coordinates not on the bitmap.</p>

<p class=A><span class=O>GetT &lt;x&gt; &lt;y&gt;:</span> Get temporary pixel.
Returns the state of the pixel at the given coordinates on the temporary
bitmap.</p>

<p class=A><span class=O>GetE &lt;x&gt; &lt;y&gt;:</span> Get extra pixel.
Returns the state of the pixel at the given coordinates on the extra bitmap.</p>

<p class=A><span class=O>GetA &lt;num&gt; &lt;x&gt; &lt;y&gt;:</span> Get
custom pixel. Returns the state of the pixel at the given coordinates on custom
monochrome bitmap &lt;num&gt;.</p>

<p class=A><span class=O>GetC &lt;x&gt; &lt;y&gt;:</span> Get color pixel.
Returns the color value of the pixel at the given coordinates on the color
bitmap. Returns black for coordinates not on the bitmap.</p>

<p class=A><span class=O>GetCT &lt;x&gt; &lt;y&gt;:</span> Get temporary color
pixel. Returns the color of the pixel at the given coordinates on the temporary
color bitmap.</p>

<p class=A><span class=O>GetCE &lt;x&gt; &lt;y&gt;:</span> Get extra color
pixel. Returns the color of the pixel at the given coordinates on the extra
color bitmap.</p>

<p class=A><span class=O>GetCA &lt;num&gt; &lt;x&gt; &lt;y&gt;:</span> Get
custom color pixel. Returns the color value of the pixel at the given
coordinates on custom color bitmap &lt;num&gt;.</p>

<p class=A><span class=O>GetX &lt;x&gt; &lt;y&gt; &lt;dir&gt;:</span> Get
texture. Returns the texture of the block at the given coordinates facing the
given direction. This means looking at appropriate bits of a pixel in custom
color bitmap nTextureWall. If &lt;dir&gt; is -1, returns the color value of the
whole pixel.</p>

<p class=A><span class=O>GetH &lt;x&gt; &lt;y&gt;:</span> Get height. Returns
the top elevation of the variable height wall at the given coordinates in a 2D
bitmap. If variable height walls arent active or theres no variable height
wall at that location, it returns 0.</p>

<p class=A><span class=O>GetM &lt;x&gt; &lt;y&gt;:</span> Get ground elevation.
Returns the value of the pixel at the given coordinates of custom color bitmap
nMarkElev.</p>

<p class=A><span class=O>Get3 &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get 3D
pixel. Returns the state of the pixel at the given coordinates of the 3D bitmap
within the main bitmap.</p>

<p class=A><span class=O>Get3T &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get
temporary 3D pixel. Returns the state of the pixel at the given coordinates on
the temporary 3D bitmap.</p>

<p class=A><span class=O>Get3E &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get extra
3D pixel. Returns the state of the pixel at the given coordinates on the extra
3D bitmap.</p>

<p class=A><span class=O>Get3A &lt;num&gt; &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span>
Get custom 3D pixel. Returns the state of the pixel at the given coordinates of
the 3D bitmap within custom monochrome bitmap &lt;num&gt;.</p>

<p class=A><span class=O>Get3C &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get 3D
color pixel. Returns the color of the pixel at the given coordinates of the 3D
bitmap within the color bitmap.</p>

<p class=A><span class=O>Get3CT &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get
temporary 3D color pixel. Returns the color of the pixel at the given
coordinates on the temporary 3D color bitmap.</p>

<p class=A><span class=O>Get3CE &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get extra
3D color pixel. Returns the color of the pixel at the given coordinates on the
extra 3D color bitmap.</p>

<p class=A><span class=O>Get3CA &lt;num&gt; &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span>
Get custom 3D color pixel. Returns the color of the pixel at the given
coordinates of the 3D bitmap within custom color bitmap &lt;num&gt;.</p>

<p class=A><span class=O>Get3X &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;dir&gt;:</span>
Get 3D texture. Returns the texture of the block at the given coordinates
facing the given direction. This means looking at appropriate bits of a pixel
on the 3D bitmap within custom color bitmap nTextureWall.</p>

<p class=A><span class=O>Get3H &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get 3D height.
Returns the top elevation of the variable height wall at the given coordinates
in a 3D bitmap.</p>

<p class=A><span class=O>Get3M &lt;x&gt; &lt;y&gt; &lt;z&gt;:</span> Get 3D
ground elevation. Returns the value of the pixel at the given coordinates of
the 3D bitmap within custom color bitmap nMarkElev.</p>

<p class=A><span class=O>Pixels:</span> Count pixels. Returns the number of on
pixels in the main bitmap. This is the same value as displayed by the Count
Pixels command.</p>

<p class=A><span class=O>RGB</span><span class=O> &lt;red&gt; &lt;green&gt;
&lt;blue&gt;:</span> Make color. Returns a 24 bit color value given red, green,
and blue parts, each ranging from 0 to 255.</p>

<p class=A><span class=O>RGBR &lt;color&gt;:</span> Red part. Returns the red
part of the given color value, a number ranging from 0 to 255.</p>

<p class=A><span class=O>RGBG &lt;color&gt;:</span> Green part. Returns the
green part of the given color value, a number ranging from 0 to 255.</p>

<p class=A><span class=O>RGBB &lt;color&gt;:</span> Blue part. Returns the blue
part of the given color value, a number ranging from 0 to 255.</p>

<p class=A><span class=O>GrayN &lt;num&gt;:</span> Grayscale color. Returns a
24 bit color value given the intensity to use, ranging from 0 to 255.</p>

<p class=A><span class=O>Light &lt;color&gt;:</span> Lighten color. Returns a
color twice as light, half way between it and white.</p>

<p class=A><span class=O>Dark &lt;color&gt;:</span> Darken color. Returns a
color twice as dark, half way between it and black.</p>

<p class=A><span class=O>Shade &lt;color&gt; &lt;num&gt;:</span> Shade color.
Returns the color darkened (for negative numbers) or lightened (for positive
numbers). The shading number should range from -100 to 100, where the farther
it is from 0, the darker or lighter the color.</p>

<p class=A><span class=O>Blend &lt;color1&gt; &lt;color2&gt;:</span> Blend
colors. Returns a color half way between &lt;color1&gt; and &lt;color2&gt;.</p>

<p class=A><span class=O>Hue</span><span class=O> &lt;num&gt;:</span> Rainbow
hue. Returns a color of the rainbow. The hue number should range from 0 to 360,
where 0 is red, 120 is green, and so on. The color range here can be modified
by the pattern settings in the Replace Color dialog.</p>

<p class=A><span class=O>HSL &lt;hue&gt; &lt;saturation&gt; &lt;luminosity&gt;:</span>
Make color. Returns a 24 bit color value given hue (ranging from 0 to 3600),
saturation (ranging from 0 to 1000), and luminosity (ranging from 0 to 1000)
parts.</p>

<p class=A><span class=O>Dlg:</span> Dialog color. Brings up the Windows Color
picker dialog, where you can visually select among a palette of colors or
specify a color in terms of red/green/blue or hue/saturation/luminosity. When
you leave the dialog, its current color will be returned.</p>

<p class=A><span class=O>NWSE &lt;north&gt; &lt;west&gt; &lt;south&gt;
&lt;east&gt;:</span> Make texture. Returns a 24 bit color value for the
textures of a pixel, given the north, west, south, and east textures, each
ranging from 0 to 63. Used to make colors for the bitmap defined by nTextureWall.</p>

<p class=A><span class=O>UD &lt;up&gt; &lt;down&gt;:</span> Make wall. Returns
a 24 bit color value for the elevations of a variable height wall, given the
top and bottom heights, each ranging from 0 to 4095. The default wall height is
256.</p>

<p class=A><span class=O>UdU &lt;color&gt;:</span> Extract wall up. Returns the
high 12 bits of &lt;color&gt;. This can be used to access the elevation or
texture of the top face of blocks, given a pixel from the relevant bitmap.</p>

<p class=A><span class=O>UdD &lt;color&gt;:</span> Extract wall down. Returns
the low 12 bits of &lt;color&gt;. This can be used to access the elevation or
texture of the bottom face of blocks, given a pixel from the relevant bitmap.</p>

<p class=A><span class=O>Timer:</span> Returns the number of seconds that have
passed since the program was started or the timer was last reset. This is the
same value as displayed by the Query Timer command.</p>

<p class=A><span class=O>Timer2:</span> Returns the number of milliseconds that
have passed. This value rounded to the nearest thousands is the same value as
returned by the Timer function and as displayed by the Query Timer command.</p>

<p class=A><span class=O>Var &lt;num&gt;:</span> Returns the number in custom
variable &lt;num&gt;.</p>

<p class=A><span class=O>Command &lt;string&gt;:</span> Returns the index for
the command action in &lt;string&gt;, the same index as used by the Enable and
Disable operations, the On Run Command event, and the Autorepeat variable.
Returns -1 if &lt;string&gt; doesnt correspond to any command. The number
returned for a particular command is very likely to change from version to
version of the program.</p>

<p class=A><span class=O>Eval &lt;string&gt;:</span> Returns &lt;string&gt;
evaluated as a numeric parameter. A stronger version of the Num function, since
this will parse and evaluate functions within the string.</p>

<p class=A><span class=O>Event &lt;num&gt;:</span> Returns whether a system
event has happened and is waiting to be processed by the system. Event 0
returns whether a key has been pressed, and Event 1 returns whether a mouse
button has been clicked.</p>

<p class=A><span class=O>Version:</span> Constant. Returns the version of
Daedalus, with the major version in the 1000s place and the minor version in
the 100s place, e.g. 3300 for version 3.3.</p>

<p class=A><span class=O>FileOpen &lt;file&gt; &lt;num&gt;:</span> Opens the
string &lt;file&gt;. If &lt;num&gt; is 0 opens the file for reading, if 1
creates a new file for writing, if 2 appends to an existing file for writing.
Returns a handle to the file opened, which is 0 if the open failed. The
FileClose operation should be used to close the file when done.</p>

<p class=A><span class=O>FileReadNum &lt;num&gt;:</span> Returns the next
number, stored as text in decimal form, from the open file in handle
&lt;num&gt;.</p>

<p class=A><span class=O>FileReadByte &lt;num&gt;:</span> Returns the next byte
from the open file in handle &lt;num&gt;.</p>

<p class=A><span class=O>FileEnd &lt;num&gt;:</span> Returns whether the file
opened for reading in handle &lt;num&gt; is at the end of file, with nothing
left to read.</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=event>EVENTS</a></p>

</div>

<p class=A>An event is an occurrence in the program which can be made to
automatically trigger a macro execution. Events can be manually defined in the Macro
Events dialog on the Macros submenu, or automatically defined by command lines.
The list of events, the macro variables which define them, and their name in
the Macro Events dialog, are below:</p>

<p class=Fixed><b>Variable             Name</b></p>

<p class=Fixed>nOnMoveOffBitmap     On Move Off Bitmap</p>

<p class=Fixed>nOnMoveIntoWall      On Move Into Wall</p>

<p class=Fixed>nOnMoveToNewCell     On Move To New Cell</p>

<p class=Fixed>nAfterMoveToNewCell  After Move To New Cell</p>

<p class=Fixed>nOnFollowToNewCell   On Follow To New Cell</p>

<p class=Fixed>nAfterRedrawInside   After Redraw Inside</p>

<p class=Fixed>nOnRedrawInside      On Redraw Inside</p>

<p class=Fixed>nOnRunCommand        On Run Command</p>

<p class=Fixed>nOnLeftClick         On Left Mouse Click</p>

<p class=Fixed>nOnRightClick        On Right Mouse Click</p>

<p class=Fixed>nOnMiddleClick       On Middle Mouse Click</p>

<p class=Fixed>nOnPrevClick         On Previous Mouse Click</p>

<p class=Fixed>nOnNextClick         On Next Mouse Click</p>

<p class=Fixed>nOnMouseMove         On Mouse Move</p>

<p class=Fixed>nOnProgramExit       On Program Exit</p>

<p class=A><span class=P>Parameters and return values:</span> When certain
event macros are called, custom variables @x, @y, and @z are automatically set
beforehand as parameters. Also for some events, custom variables are looked at
after the event returns, which change subsequent program behavior.</p>

<p class=A><span class=P>Motion events:</span> For On Move Off Bitmap, On Move
Into Wall, On Move To New Cell, and On Follow To New Cell, @x, @y, and @z
contain the new bitmap coordinates the dot is trying to move to, i.e. the
coordinate off the bitmap, inside the wall, or another cell. The current location
of the dot will be adjacent or nearby these coordinates. After the macro
returns, @z determines whether to do the default behavior.</p>

<p class=B>On Move Off Bitmap: If @z is non-zero, the dot wont move off the
bitmap.<br>
On Move Into Wall: If @z is non-zero, the dot will move into the wall as if it
were space.<br>
On Move To New Cell: If @z is non-zero, the dot wont move to the new cell.<br>
On Follow to New Cell: If @z is non-zero, the dot will stop at the current
point as if there were a junction there.</p>

<p class=A><span class=P>After Move To New Cell:</span> When this event macro
is run, @x, @y, and @z contain the new coordinates of the dot, which it just
moved to.</p>

<p class=A><span class=P>On Redraw Inside:</span> After the macro returns, if
the value of fRedrawWhenBitmapEdited has been changed (toggled from its
original value) then the screen wont be redrawn.</p>

<p class=A><span class=P>On Run Command:</span> When this event macro is run,
@x contains the ASCII value of the key pressed to invoke the command, if any,
otherwise @x is zero. @y contains the index of the command about to be run,
where this index is the same as returned by the Command function. After the
macro returns, if @z is non-zero, the command wont run. This can be used to
disable or override the functionality of commands.</p>

<p class=A><span class=P>Mouse events:</span> For all mouse events (On Left
Mouse Click, On Right Mouse Click, On Middle Mouse Click, On Previous Mouse
Click, On Next Mouse Click, and On Mouse Move), @x and @y contain the
coordinates clicked on or being passed over. For overhead view this means the
bitmap pixel clicked on. For inside view, @x and @y range from (-10000, -10000)
for the upper left corner of the window to (10000, 10000) for the lower right.
For both views, @z contains the coordinates of the raw pixel within the window
clicked on, with the horizontal coordinate in the low 16 bits, and the vertical
in the high 16 bits. For all mouse events, after the macro returns, if @z is
non-zero, the normal behavior of the click will be skipped, otherwise the
normal behavior will be done then.</p>

<p class=A><span class=P>On Program Exit:</span> After this event macro
returns, if @z is non-zero, the program wont terminate.</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=texture>TEXTURE MAPPING</a></p>

</div>

<p class=A>Texture mapping in the perspective inside view is determined by a
special set of bitmaps. Just as theres a list of custom variables and strings,
theres a special list of custom monochrome bitmaps and custom color bitmaps,
beyond the standard main, temporary, and extra bitmaps. The commands on the
Apply Texture submenu work by automatically changing these bitmaps
appropriately. Custom bitmaps dont have to be used for textures, where they
also define ceiling markings and variable height walls, and can even just used
as a place for scripts to store extra bitmaps. For purposes of texture mapping,
a custom color bitmap is called a texture, and a custom monochrome bitmap is
called a mask. Custom bitmaps are accessed through the CopyMask, CopyTexture,
SwapMask, SwapTexture, DeleteMask, and DeleteTexture operations.</p>

<p class=A>Texture 0 (or the texture indicated by nTextureWall) determines
which texture bitmaps are displayed where. For each block in the inside view,
the corresponding pixel in texture 0 determines the texture for each of the
blocks four walls. In the 24 bit color value in each pixel of texture 0, the
low 6 bits 0-5 determine the texture of the wall facing direction 0 or North,
bits 6-11 the texture of direction 1 or West, bits 12-17 direction 2 or South,
and the high 6 bits 18-23 the texture of direction 3 or East. The number
contained in each set of bits determines the index of the texture and mask
bitmaps to apply to that wall. If this number is zero, or the desired pixel is
outside the bounds of texture 0, then the wall has no texture. Note 6 bits can
store numbers from 0-63, and since value 0 is special indicating no texture,
that means the maximum number of different wall textures that can be displayed
at a time is 63.</p>

<p class=A>If variable fTextureDual is set, then texture bits are interpreted
differently. When set, the low 12 bits 0-11 of a texture index indicate the
texture bitmap for the north and south faces, and the high 12 bits 12-23 of the
texture index indicate the texture for the west and east faces. That means
walls will have the same north/south and west/east faces. 12 bits can store
numbers from 0-4095, which means this option allows 4095 different wall
textures to be displayed at a time, with the limitation of opposite sides of
walls having the same texture.</p>

<p class=A>The texture and mask bitmaps at a non-zero index together determine
the texture mapping to display on a wall. If the texture bitmap exists, and the
mask bitmap doesnt, then the wall will be solidly covered by the color
texture, same as the result produced by the Color Walls apply texture command.
If the mask bitmap exists, and the texture bitmap doesnt, then the wall will
have the mask bitmap overlaying it, i.e. a black or white etching, same as the
result produced by the Overlay Walls command. If both bitmaps exist, then the
wall will have the color texture overlaying it, same as the results produced by
the Color Overlay Walls command. If neither bitmap exists, then the wall will
have no texture.</p>

<p class=A>Mask 0 (or the mask indicated by nTextureWall) determines how to use
the mask bitmap at a particular index, if present. If a pixel in mask 0
corresponding to a block is off, or the pixel is outside the bounds of the mask
bitmap, then the black pixels in the mask at the actual index are given focus.
That means either off pixels in the mask will overlay the wall as black pixels,
or on pixels in the mask will appear as pixels from the color texture and off
pixels will be the walls color. If a pixel in mask 0 is on, then white pixels
in the actual mask are given focus. That means either on pixels in the mask
will overlay the wall as white pixels, or off pixels in the mask will appear as
pixels from the color texture and on pixels will be the walls color.</p>

<p class=A>&nbsp;</p>

<div style='border:none;border-top:solid windowtext 4.5pt;padding:1.0pt 0in 0in 0in'>

<p class=Section><a name=license>LICENSE</a></p>

</div>

<p class=A>IMPORTANT NOTICE: Daedalus and all Maze generation and general
graphics routines used in this program are Copyright (C) 1998-2018 by Walter D.
Pullen. Permission is granted to freely use, modify, and distribute these
routines provided these credits and notices remain unmodified with any altered
or distributed versions of the program. The user does have all rights to Mazes
and other graphic output they make in Daedalus, like a novel created in a word
processor.</p>

<p class=A>More formally: This program is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License, or
(at your option) any later version. This program is distributed in the hope
that it will be useful and inspiring, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details, a copy of which is in the
LICENSE.HTM included with Daedalus, and at <a href="http://www.gnu.org/">http://www.gnu.org</a></p>

<p class=Fixed><span style='background:silver'>O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O</span></p>

<p class=Fixed><span style='background:silver'>*</span>       Walter D.
&quot;Cruiser1&quot; Pullen :)       !       <a href="mailto:Astara@msn.com">Astara@msn.com</a>      
<span style='background:silver'>*</span></p>

<p class=Fixed><span style='background:silver'>O</span> Find your way through
life's Maze: <a href="http://www.astrolog.org/labyrnth.htm">http://www.astrolog.org/labyrnth.htm</a>
<span style='background:silver'>O</span></p>

<p class=Fixed><span style='background:silver'>*</span> &quot;Who am I, What am
I?  As I am, I am not.  But as we are, I AM.  And to <span style='background:
silver'>*</span></p>

<p class=Fixed><span style='background:silver'>O</span> you my creation, My
Perfect Love is your Perfect Freedom. And I will be <span style='background:
silver'>O</span></p>

<p class=Fixed><span style='background:silver'>*</span> with you forever and
ever, until the End, and then forever more.&quot; - GOD <span style='background:
silver'>*</span></p>

<p class=Fixed><span style='background:silver'>O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O*O</span></p>

</div>

</body>

</html>
